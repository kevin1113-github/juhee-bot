{"version":3,"sources":["src/common.browser/WebsocketMessageAdapter.ts"],"names":[],"mappings":"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","file":"WebsocketMessageAdapter.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// Node.JS specific web socket / browser support.\r\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\nimport * as http from \"http\";\r\nimport * as net from \"net\";\r\nimport * as tls from \"tls\";\r\nimport Agent from \"agent-base\";\r\nimport HttpsProxyAgent from \"https-proxy-agent\";\r\n\r\nimport ws from \"ws\";\r\nimport { HeaderNames } from \"../common.speech/HeaderNames.js\";\r\nimport {\r\n    ArgumentNullError,\r\n    BackgroundEvent,\r\n    ConnectionClosedEvent,\r\n    ConnectionErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    ConnectionOpenResponse,\r\n    ConnectionStartEvent,\r\n    ConnectionState,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    Queue,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports.js\";\r\nimport { ProxyInfo } from \"./ProxyInfo.js\";\r\n\r\ninterface ISendItem {\r\n    Message: ConnectionMessage;\r\n    RawWebsocketMessage: RawWebsocketMessage;\r\n    sendStatusDeferral: Deferred<void>;\r\n}\r\n\r\nexport class WebsocketMessageAdapter {\r\n    private privConnectionState: ConnectionState;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privWebsocketClient: WebSocket | ws;\r\n\r\n    private privSendMessageQueue: Queue<ISendItem>;\r\n    private privReceivingMessageQueue: Queue<ConnectionMessage>;\r\n    private privConnectionEstablishDeferral: Deferred<ConnectionOpenResponse>;\r\n    private privCertificateValidatedDeferral: Deferred<void>;\r\n    private privDisconnectDeferral: Deferred<void>;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privConnectionId: string;\r\n    private privUri: string;\r\n    private proxyInfo: ProxyInfo;\r\n    private privHeaders: { [key: string]: string };\r\n    private privLastErrorReceived: string;\r\n    private privEnableCompression: boolean;\r\n\r\n    public static forceNpmWebSocket: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        connectionId: string,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo,\r\n        headers: { [key: string]: string },\r\n        enableCompression: boolean) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.proxyInfo = proxyInfo;\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privConnectionId = connectionId;\r\n        this.privMessageFormatter = messageFormatter;\r\n        this.privConnectionState = ConnectionState.None;\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n        this.privEnableCompression = enableCompression;\r\n\r\n        // Add the connection ID to the headers\r\n        this.privHeaders[HeaderNames.ConnectionId] = this.privConnectionId;\r\n\r\n        this.privLastErrorReceived = \"\";\r\n    }\r\n\r\n    public get state(): ConnectionState {\r\n        return this.privConnectionState;\r\n    }\r\n\r\n    public open(): Promise<ConnectionOpenResponse> {\r\n        if (this.privConnectionState === ConnectionState.Disconnected) {\r\n            return Promise.reject<ConnectionOpenResponse>(`Cannot open a connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        if (this.privConnectionEstablishDeferral) {\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.privConnectionEstablishDeferral = new Deferred<ConnectionOpenResponse>();\r\n        this.privCertificateValidatedDeferral = new Deferred<void>();\r\n\r\n        this.privConnectionState = ConnectionState.Connecting;\r\n\r\n        try {\r\n\r\n            if (typeof WebSocket !== \"undefined\" && !WebsocketMessageAdapter.forceNpmWebSocket) {\r\n                // Browser handles cert checks.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n\r\n                this.privWebsocketClient = new WebSocket(this.privUri);\r\n            } else {\r\n                const options: ws.ClientOptions = { headers: this.privHeaders, perMessageDeflate: this.privEnableCompression };\r\n                // The ocsp library will handle validation for us and fail the connection if needed.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n\r\n                options.agent = this.getAgent();\r\n                // Workaround for https://github.com/microsoft/cognitive-services-speech-sdk-js/issues/465\r\n                // Which is root caused by https://github.com/TooTallNate/node-agent-base/issues/61\r\n                const uri = new URL(this.privUri);\r\n                let protocol: string = uri.protocol;\r\n\r\n                if (protocol?.toLocaleLowerCase() === \"wss:\") {\r\n                    protocol = \"https:\";\r\n                } else if (protocol?.toLocaleLowerCase() === \"ws:\") {\r\n                    protocol = \"http:\";\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n                (options.agent as any).protocol = protocol;\r\n                this.privWebsocketClient = new ws(this.privUri, options);\r\n            }\r\n\r\n            this.privWebsocketClient.binaryType = \"arraybuffer\";\r\n            this.privReceivingMessageQueue = new Queue<ConnectionMessage>();\r\n            this.privDisconnectDeferral = new Deferred<void>();\r\n            this.privSendMessageQueue = new Queue<ISendItem>();\r\n            this.processSendQueue().catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        } catch (error) {\r\n            this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(500, error as string));\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.onEvent(new ConnectionStartEvent(this.privConnectionId, this.privUri));\r\n\r\n        this.privWebsocketClient.onopen = (): void => {\r\n            this.privCertificateValidatedDeferral.promise.then((): void => {\r\n                this.privConnectionState = ConnectionState.Connected;\r\n                this.onEvent(new ConnectionEstablishedEvent(this.privConnectionId));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(200, \"\"));\r\n            }, (error: string): void => {\r\n                this.privConnectionEstablishDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onerror = (e: { error: any; message: string; type: string; target: WebSocket | ws }): void => {\r\n            this.onEvent(new ConnectionErrorEvent(this.privConnectionId, e.message, e.type));\r\n            this.privLastErrorReceived = e.message;\r\n        };\r\n\r\n        this.privWebsocketClient.onclose = (e: { wasClean: boolean; code: number; reason: string; target: WebSocket | ws }): void => {\r\n            if (this.privConnectionState === ConnectionState.Connecting) {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                // this.onEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(e.code, e.reason + \" \" + this.privLastErrorReceived));\r\n            } else {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                this.privWebsocketClient = null;\r\n                this.onEvent(new ConnectionClosedEvent(this.privConnectionId, e.code, e.reason));\r\n            }\r\n\r\n            this.onClose(e.code, e.reason).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onmessage = (e: { data: ws.Data; type: string; target: WebSocket | ws }): void => {\r\n            const networkReceivedTime = new Date().toISOString();\r\n            if (this.privConnectionState === ConnectionState.Connected) {\r\n                const deferred = new Deferred<ConnectionMessage>();\r\n                // let id = ++this.idCounter;\r\n                this.privReceivingMessageQueue.enqueueFromPromise(deferred.promise);\r\n                if (e.data instanceof ArrayBuffer) {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Binary, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage): void => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string): void => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid binary message format. Error: ${error}`);\r\n                        });\r\n                } else {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage): void => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string): void => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid text message format. Error: ${error}`);\r\n                        });\r\n                }\r\n            }\r\n        };\r\n\r\n        return this.privConnectionEstablishDeferral.promise;\r\n    }\r\n\r\n    public send(message: ConnectionMessage): Promise<void> {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(`Cannot send on connection that is in ${ConnectionState[this.privConnectionState]} state`);\r\n        }\r\n\r\n        const messageSendStatusDeferral = new Deferred<void>();\r\n        const messageSendDeferral = new Deferred<ISendItem>();\r\n\r\n        this.privSendMessageQueue.enqueueFromPromise(messageSendDeferral.promise);\r\n\r\n        this.privMessageFormatter\r\n            .fromConnectionMessage(message)\r\n            .then((rawMessage: RawWebsocketMessage): void => {\r\n                messageSendDeferral.resolve({\r\n                    Message: message,\r\n                    RawWebsocketMessage: rawMessage,\r\n                    sendStatusDeferral: messageSendStatusDeferral,\r\n                });\r\n            }, (error: string): void => {\r\n                messageSendDeferral.reject(`Error formatting the message. ${error}`);\r\n            });\r\n\r\n        return messageSendStatusDeferral.promise;\r\n    }\r\n\r\n    public read(): Promise<ConnectionMessage> {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject<ConnectionMessage>(`Cannot read on connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        return this.privReceivingMessageQueue.dequeue();\r\n    }\r\n\r\n    public close(reason?: string): Promise<void> {\r\n        if (this.privWebsocketClient) {\r\n            if (this.privConnectionState !== ConnectionState.Disconnected) {\r\n                this.privWebsocketClient.close(1000, reason ? reason : \"Normal closure by client\");\r\n            }\r\n        } else {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return this.privDisconnectDeferral.promise;\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    private sendRawMessage(sendItem: ISendItem): Promise<void> {\r\n        try {\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            this.onEvent(new ConnectionMessageSentEvent(this.privConnectionId, new Date().toISOString(), sendItem.Message));\r\n\r\n            // add a check for the ws readystate in order to stop the red console error 'WebSocket is already in CLOSING or CLOSED state' appearing\r\n            if (this.isWebsocketOpen) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n                this.privWebsocketClient.send(sendItem.RawWebsocketMessage.payload);\r\n            } else {\r\n                return Promise.reject(\"websocket send error: Websocket not ready \" + this.privConnectionId + \" \" + sendItem.Message.id + \" \" + new Error().stack);\r\n            }\r\n            return Promise.resolve();\r\n\r\n        } catch (e) {\r\n            return Promise.reject(`websocket send error: ${e as string}`);\r\n        }\r\n    }\r\n\r\n    private async onClose(code: number, reason: string): Promise<void> {\r\n        const closeReason = `Connection closed. ${code}: ${reason}`;\r\n        this.privConnectionState = ConnectionState.Disconnected;\r\n        this.privDisconnectDeferral.resolve();\r\n        await this.privReceivingMessageQueue.drainAndDispose((): void => {\r\n            // TODO: Events for these ?\r\n            // Logger.instance.onEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\r\n        }, closeReason);\r\n\r\n        await this.privSendMessageQueue.drainAndDispose((pendingSendItem: ISendItem): void => {\r\n            pendingSendItem.sendStatusDeferral.reject(closeReason);\r\n        }, closeReason);\r\n    }\r\n\r\n    private async processSendQueue(): Promise<void> {\r\n        while (true) {\r\n            const itemToSend: Promise<ISendItem> = this.privSendMessageQueue.dequeue();\r\n            const sendItem: ISendItem = await itemToSend;\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this.sendRawMessage(sendItem);\r\n                sendItem.sendStatusDeferral.resolve();\r\n            } catch (sendError) {\r\n                sendItem.sendStatusDeferral.reject(sendError as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    private onEvent(event: ConnectionEvent): void {\r\n        this.privConnectionEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private getAgent(): http.Agent {\r\n        // eslint-disable-next-line @typescript-eslint/unbound-method\r\n        const agent: { proxyInfo: ProxyInfo } = new Agent.Agent(this.createConnection) as unknown as { proxyInfo: ProxyInfo } ;\r\n\r\n        if (this.proxyInfo !== undefined &&\r\n            this.proxyInfo.HostName !== undefined &&\r\n            this.proxyInfo.Port > 0) {\r\n            agent.proxyInfo = this.proxyInfo;\r\n        }\r\n\r\n        return agent as unknown as http.Agent;\r\n    }\r\n\r\n    private static GetProxyAgent(proxyInfo: ProxyInfo): HttpsProxyAgent {\r\n        const httpProxyOptions: HttpsProxyAgent.HttpsProxyAgentOptions = {\r\n            host: proxyInfo.HostName,\r\n            port: proxyInfo.Port,\r\n        };\r\n\r\n        if (!!proxyInfo.UserName) {\r\n            httpProxyOptions.headers = {\r\n                \"Proxy-Authentication\": \"Basic \" + new Buffer(`${proxyInfo.UserName}:${(proxyInfo.Password === undefined) ? \"\" : proxyInfo.Password}`).toString(\"base64\"),\r\n            };\r\n        } else {\r\n            httpProxyOptions.headers = {};\r\n        }\r\n\r\n        httpProxyOptions.headers.requestOCSP = \"true\";\r\n\r\n        const httpProxyAgent: HttpsProxyAgent = new HttpsProxyAgent(httpProxyOptions);\r\n        return httpProxyAgent;\r\n    }\r\n\r\n    private createConnection(request: Agent.ClientRequest, options: Agent.RequestOptions): Promise<net.Socket> {\r\n        let socketPromise: Promise<net.Socket>;\r\n\r\n        options = {\r\n            ...options,\r\n            ...{\r\n                requestOCSP: true,\r\n                servername: options.host\r\n            }\r\n        };\r\n\r\n        if (!!this.proxyInfo) {\r\n            const httpProxyAgent: HttpsProxyAgent = WebsocketMessageAdapter.GetProxyAgent(this.proxyInfo);\r\n            const baseAgent: Agent.Agent = httpProxyAgent as unknown as Agent.Agent;\r\n\r\n            socketPromise = new Promise<net.Socket>((resolve: (value: net.Socket) => void, reject: (error: string | Error) => void): void => {\r\n                baseAgent.callback(request, options, (error: Error, socket: net.Socket): void => {\r\n                    if (!!error) {\r\n                        reject(error);\r\n                    } else {\r\n                        resolve(socket);\r\n                    }\r\n                });\r\n            });\r\n        } else {\r\n            if (!!options.secureEndpoint) {\r\n                socketPromise = Promise.resolve(tls.connect(options));\r\n            } else {\r\n                socketPromise = Promise.resolve(net.connect(options));\r\n            }\r\n        }\r\n\r\n        return socketPromise;\r\n    }\r\n\r\n    private get isWebsocketOpen(): boolean {\r\n        return this.privWebsocketClient && this.privWebsocketClient.readyState === this.privWebsocketClient.OPEN;\r\n    }\r\n\r\n}\r\n"]}