{"version":3,"sources":["src/common.speech/DialogConnectorFactory.ts"],"names":[],"mappings":"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","file":"DialogConnectorFactory.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport { OutputFormatPropertyName } from \"../common.speech/Exports.js\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports.js\";\r\nimport { DialogServiceConfig, OutputFormat, PropertyId } from \"../sdk/Exports.js\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\r\nimport { AuthInfo, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\r\n\r\nexport class DialogConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private static readonly ApiKey: string = \"api\";\r\n    private static readonly BaseUrl: string = \"convai.speech\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        const applicationId: string = config.parameters.getProperty(PropertyId.Conversation_ApplicationId, \"\");\r\n        const dialogType: string = config.parameters.getProperty(PropertyId.Conversation_DialogType);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\r\n        const requestTurnStatus: string = config.parameters.getProperty(PropertyId.Conversation_Request_Bot_Status_Messages, \"true\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[HeaderNames.ConnectionId] = connectionId;\r\n        queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        queryParams[QueryParameterNames.Language] = language;\r\n        queryParams[QueryParameterNames.RequestBotStatusMessages] = requestTurnStatus;\r\n        if (applicationId) {\r\n            queryParams[QueryParameterNames.BotId] = applicationId;\r\n            if (dialogType === DialogServiceConfig.DialogTypes.CustomCommands) {\r\n                queryParams[HeaderNames.CustomCommandsAppId] = applicationId;\r\n            }\r\n        }\r\n\r\n        const resourceInfix: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"commands/\"\r\n            : \"\";\r\n        const version: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"v1\"\r\n            : dialogType === DialogServiceConfig.DialogTypes.BotFramework ? \"v3\"\r\n            : \"v0\";\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (authInfo.token != null && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n\r\n        // The URL used for connection is chosen in a priority order of specification:\r\n        //  1. If a custom endpoint is provided, that URL is used verbatim.\r\n        //  2. If a custom host is provided (e.g. \"wss://my.custom.endpoint.com:1123\"), a URL is constructed from it.\r\n        //  3. If no custom connection details are provided, a URL is constructed from default values.\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, \"\");\r\n        if (!endpoint) {\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(\r\n                PropertyId.SpeechServiceConnection_Host,\r\n                `wss://${region}.${DialogConnectionFactory.BaseUrl}${hostSuffix}`);\r\n            const standardizedHost: string = host.endsWith(\"/\") ? host : host + \"/\";\r\n            endpoint = `${standardizedHost}${resourceInfix}${DialogConnectionFactory.ApiKey}/${version}`;\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n"]}