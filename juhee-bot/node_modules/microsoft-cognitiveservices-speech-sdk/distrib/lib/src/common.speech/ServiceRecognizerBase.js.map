{"version":3,"sources":["src/common.speech/ServiceRecognizerBase.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;;;;;;;;;;;AAElC,6DAAmE;AAEnE,qDAe8B;AAG9B,kDAU2B;AAE3B,6CAUsB;AAOtB,+FAAgF;AAgChF,MAAsB,qBAAqB;IAmCvC,YACI,cAA+B,EAC/B,iBAAqC,EACrC,WAAyB,EACzB,gBAAkC,EAClC,UAAsB;QApC1B,yCAAyC;QACzC,yDAAyD;QACjD,uCAAkC,GAAyB,SAAS,CAAC;QAE7E,oFAAoF;QACpF,yDAAyD;QACjD,0BAAqB,GAAyB,SAAS,CAAC;QAUxD,mBAAc,GAA8C,UAAU,CAAC;QAEvE,oBAAe,GAAY,KAAK,CAAC;QACjC,0BAAqB,GAAW,CAAC,CAAC;QAShC,wBAAmB,GAAY,KAAK,CAAC;QACrC,wCAAmC,GAAY,KAAK,CAAC;QAiPrD,sBAAiB,GAAoH,SAAS,CAAC;QAElJ,qBAAgB,GAA0E,SAAS,CAAC;QA2GjG,uBAAkB,GAAwB,SAAS,CAAC;QA0GpD,2BAAsB,GAAwB,SAAS,CAAC;QAkHxD,+BAA0B,GAA+C,SAAS,CAAC;QA8BnF,4BAAuB,GAA+D,SAAS,CAAC;QAmChG,6BAAwB,GAAsD,SAAS,CAAC;QACxF,8BAAyB,GAAwC,SAAS,CAAC;QAC3E,kCAA6B,GAA+B,SAAS,CAAC;QApnB5E,IAAI,CAAC,cAAc,EAAE;YACjB,MAAM,IAAI,8BAAiB,CAAC,gBAAgB,CAAC,CAAC;SACjD;QAED,IAAI,CAAC,iBAAiB,EAAE;YACpB,MAAM,IAAI,8BAAiB,CAAC,mBAAmB,CAAC,CAAC;SACpD;QAED,IAAI,CAAC,WAAW,EAAE;YACd,MAAM,IAAI,8BAAiB,CAAC,aAAa,CAAC,CAAC;SAC9C;QAED,IAAI,CAAC,gBAAgB,EAAE;YACnB,MAAM,IAAI,8BAAiB,CAAC,kBAAkB,CAAC,CAAC;SACnD;QAED,IAAI,CAAC,mBAAmB,GAAG,gBAAgB,CAAC,2BAA2B,CAAC;QACxE,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;QACvC,IAAI,CAAC,kBAAkB,GAAG,cAAc,CAAC;QACzC,IAAI,CAAC,qBAAqB,GAAG,iBAAiB,CAAC;QAC/C,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC;QACnC,IAAI,CAAC,oBAAoB,GAAG,gBAAgB,CAAC;QAC7C,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAC5B,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC;QACjC,IAAI,CAAC,kBAAkB,GAAG,IAAI,2BAAc,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,EAAE,CAAC,CAAC;QACxE,IAAI,CAAC,oBAAoB,GAAG,IAAI,wBAAW,EAAmB,CAAC;QAC/D,IAAI,CAAC,iBAAiB,GAAG,IAAI,wBAAW,EAAgB,CAAC;QACzD,IAAI,CAAC,kBAAkB,GAAG,IAAI,kCAAqB,EAAE,CAAC;QACtD,IAAI,CAAC,iBAAiB,GAAG,IAAI,0BAAa,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACpE,IAAI,CAAC,eAAe,GAAG,IAAI,wBAAW,EAAE,CAAC;QACzC,MAAM,iBAAiB,GAAW,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,WAAW,CAAC,uBAAU,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;QACrI,IAAI,iBAAiB,KAAK,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,WAAW,IAAI,OAAO,CAAC,MAAM,CAAC,KAAK,WAAW,EAAE;YAChG,IAAI,CAAC,cAAc,GAAG,oBAAO,CAAC,UAAU,CAAC;SAC5C;aAAM;YACH,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBAC/B,mEAAmE;gBACnE,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACxD;SACJ;QAED,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,eAAgC,EAAQ,EAAE;YACpE,IAAI,eAAe,CAAC,IAAI,KAAK,uBAAuB,EAAE;gBAClD,MAAM,qBAAqB,GAAG,eAAwC,CAAC;gBACvE,IAAI,qBAAqB,CAAC,UAAU,KAAK,IAAI;oBACzC,qBAAqB,CAAC,UAAU,KAAK,IAAI;oBACzC,qBAAqB,CAAC,UAAU,KAAK,IAAI;oBACzC,qBAAqB,CAAC,UAAU,KAAK,IAAI;oBACzC,IAAI,CAAC,kBAAkB,CAAC,qBAAqB,GAAG,IAAI,CAAC,oBAAoB,CAAC,aAAa,EACzF;oBACE,KAAK,IAAI,CAAC,sBAAsB,CAAC,+BAAkB,CAAC,KAAK,EACrD,qBAAqB,CAAC,UAAU,KAAK,IAAI,CAAC,CAAC,CAAC,kCAAqB,CAAC,oBAAoB,CAAC,CAAC,CAAC,kCAAqB,CAAC,iBAAiB,EAChI,GAAG,qBAAqB,CAAC,MAAM,0BAA0B,qBAAqB,CAAC,UAAU,EAAE,CAAC,CAAC;iBACpG;aACJ;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC1B,IAAI,CAAC,wBAAwB,GAAG,6BAAgB,EAAE,CAAC;SACtD;QAED,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,wBAAwB,EAAE,CAAC;IACpC,CAAC;IAES,kBAAkB;QACxB,MAAM,eAAe,GAAW,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,WAAW,CAAC,uBAAU,CAAC,8CAA8C,EAAE,SAAS,CAAC,CAAC;QACvJ,IAAI,eAAe,KAAK,SAAS,EAAE;YAC/B,MAAM,SAAS,GAAG,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,gBAAgB,GAAY,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,WAAW,CAAC,uBAAU,CAAC,wCAAwC,EAAE,SAAS,CAAC,CAAC;YACnJ,MAAM,MAAM,GAAG,CAAE,gBAAgB,KAAK,SAAS,CAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC;YAC1E,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,aAAa,EAAE;gBAC7C,SAAS,EAAE,EAAE,MAAM,EAAE;gBACrB,MAAM,EAAE,EAAE,cAAc,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE;gBAC9C,eAAe,EAAE,SAAS;aAC7B,CAAC,CAAC;YAEH,IAAI,gBAAgB,KAAK,SAAS,EAAE;gBAChC,MAAM,kBAAkB,GAA8B,EAAE,CAAC;gBACzD,KAAK,MAAM,IAAI,IAAI,SAAS,EAAE;oBAC1B,kBAAkB,CAAC,IAAI,CAAC,GAAG,gBAAgB,CAAC;iBAC/C;gBACD,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,WAAW,EAAE;oBAC3C,aAAa,EAAE,kBAAkB;iBACpC,CAAC,CAAC;aACN;SACJ;IACL,CAAC;IAES,gCAAgC;QACtC,MAAM,yBAAyB,GAAW,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,WAAW,CAAC,uBAAU,CAAC,mCAAmC,EAAE,SAAS,CAAC,CAAC;QACtJ,IAAI,yBAAyB,KAAK,SAAS,EAAE;YACzC,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,KAAK,4BAAe,CAAC,YAAY,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC;gBACjF,IAAI,CAAC,eAAe,KAAK,4BAAe,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,aAAa,CAAC;YACrF,MAAM,4BAA4B,GAAW,QAAQ,CAAC,yBAAyB,EAAE,EAAE,CAAC,CAAC;YACrF,MAAM,eAAe,GAAG,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,iBAAiB,CAAoB,CAAC;YAChG,eAAe,CAAC,IAAI,GAAG,IAAI,CAAC;YAC5B,eAAe,CAAC,IAAI,CAAC,GAAG;gBACpB,YAAY,EAAE;oBACV,IAAI,EAAE,QAAQ;oBACd,4BAA4B;iBAC/B;aACJ,CAAC;YACF,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC;SACzE;IACL,CAAC;IAES,iBAAiB;QACvB,MAAM,eAAe,GAAG,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,iBAAiB,CAAoB,CAAC;QAChG,IAAI,IAAI,CAAC,oBAAoB,CAAC,yBAAyB,KAAK,SAAS,EAAE;YACnE,MAAM,eAAe,GAAa,IAAI,CAAC,oBAAoB,CAAC,yBAAyB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAEjG,IAAI,oBAAoB,CAAC;YACzB,IAAI,IAAI,CAAC,oBAAoB,CAAC,cAAc,KAAK,YAAY,EAAE;gBAC3D,oBAAoB,GAAG,kBAAkB,CAAC;aAC7C;iBAAM,EAAC,gDAAgD;gBACpD,oBAAoB,GAAG,oBAAoB,CAAC;aAC/C;YAED,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,YAAY,EAAE;gBAC5C,QAAQ,EAAE,mBAAmB;gBAC7B,SAAS,EAAE,eAAe;gBAC1B,IAAI,EAAE,oBAAoB;gBAC1B,SAAS,EAAE,EAAE,MAAM,EAAE,WAAW,EAAE;gBAClC,SAAS,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE;aAChC,CAAC,CAAC;YACH,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,cAAc,EAAE;gBAC9C,cAAc,EAAE;oBACZ,UAAU,EAAE,MAAM;iBACrB;gBACD,aAAa,EAAE;oBACX,UAAU,EAAE,QAAQ;iBACvB;aACJ,CAAC,CAAC;YACH,MAAM,YAAY,GAAkB,IAAI,CAAC,oBAAoB,CAAC,oBAAoB,CAAC;YACnF,IAAI,YAAY,KAAK,SAAS,EAAE;gBAC5B,eAAe,CAAC,YAAY,GAAG,YAAY,CAAC;gBAC5C,eAAe,CAAC,SAAS,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;gBAC/C,eAAe,CAAC,SAAS,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;aAClD;SACJ;QACD,MAAM,eAAe,GAAW,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,WAAW,CAAC,uBAAU,CAAC,8CAA8C,EAAE,SAAS,CAAC,CAAC;QACvJ,IAAI,eAAe,KAAK,SAAS,EAAE;YAC/B,eAAe,CAAC,SAAS,GAAG,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC;YACpD,eAAe,CAAC,SAAS,GAAG,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC;YACpD,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,cAAc,EAAE;gBAC9C,cAAc,EAAE;oBACZ,UAAU,EAAE,MAAM;iBACrB;gBACD,aAAa,EAAE;oBACX,UAAU,EAAE,MAAM;iBACrB;aACJ,CAAC,CAAC;SACN;QAED,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC;IAC1E,CAAC;IAES,wBAAwB;QAC9B,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC1B,MAAM,0BAA0B,GAAW,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,WAAW,CAAC,uBAAU,CAAC,gDAAgD,EAAE,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;YAChL,IAAI,0BAA0B,KAAK,MAAM,EAAE;gBACvC,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,EAAE,CAAC;aAChD;iBAAM;gBACH,MAAM,YAAY,GAAW,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,WAAW,CAAC,qCAAwB,EAAE,yBAAY,CAAC,yBAAY,CAAC,MAAM,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;gBACzJ,IAAI,YAAY,KAAK,yBAAY,CAAC,yBAAY,CAAC,QAAQ,CAAC,CAAC,iBAAiB,EAAE,EAAE;oBAC1E,IAAI,CAAC,iBAAiB,CAAC,uBAAuB,EAAE,CAAC;iBACpD;aACJ;SACJ;IACL,CAAC;IAED,IAAW,2BAA2B;QAClC,OAAO,IAAI,CAAC,mBAAmB,CAAC;IACpC,CAAC;IAED,IAAW,WAAW;QAClB,OAAO,IAAI,CAAC,eAAe,CAAC;IAChC,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAClC,CAAC;IAED,IAAW,cAAc;QACrB,OAAO,IAAI,CAAC,kBAAkB,CAAC;IACnC,CAAC;IAED,IAAW,WAAW;QAClB,OAAO,IAAI,CAAC,eAAe,CAAC;IAChC,CAAC;IAED,IAAW,2BAA2B,CAAC,KAAa;QAChD,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,WAAW,CAAC,uBAAU,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;IACrG,CAAC;IAED,IAAW,gBAAgB,CAAC,IAAY;QACpC,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,WAAW,CAAC,uBAAU,CAAC,qCAAqC,EAAE,IAAI,CAAC,CAAC;IAC7G,CAAC;IAED,IAAW,cAAc,CAAC,IAAqB;QAC3C,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;IACnC,CAAC;IAEM,UAAU;QACb,OAAO,IAAI,CAAC,cAAc,CAAC;IAC/B,CAAC;IAEY,OAAO,CAAC,MAAe;;YAChC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC3B,IAAI,IAAI,CAAC,kCAAkC,KAAK,SAAS,EAAE;gBACvD,IAAI;oBACA,MAAM,UAAU,GAAgB,MAAM,IAAI,CAAC,kCAAkC,CAAC;oBAC9E,MAAM,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;iBACpC;gBAAC,OAAO,KAAK,EAAE;oBACZ,uEAAuE;oBACvE,OAAO;iBACV;aACJ;QACL,CAAC;KAAA;IAED,IAAW,gBAAgB;QACvB,OAAO,IAAI,CAAC,oBAAoB,CAAC;IACrC,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAClC,CAAC;IAED,IAAW,eAAe;QACtB,OAAO,IAAI,CAAC,oBAAoB,CAAC,eAAe,CAAC;IACrD,CAAC;IAMY,SAAS,CAClB,QAAyB,EACzB,eAAqD,EACrD,aAAkC;;YAGlC,IAAI,IAAI,CAAC,iBAAiB,KAAK,SAAS,EAAE;gBACtC,MAAM,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,eAAe,EAAE,aAAa,CAAC,CAAC;gBACvE,OAAO;aACV;YACD,6FAA6F;YAC7F,IAAI,CAAC,kCAAkC,GAAG,SAAS,CAAC;YACpD,IAAI,CAAC,oBAAoB,CAAC,eAAe,GAAG,QAAQ,CAAC;YACrD,IAAI,CAAC,gCAAgC,EAAE,CAAC;YACxC,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAE1B,IAAI,CAAC,mBAAmB,GAAG,eAAe,CAAC;YAC3C,IAAI,CAAC,iBAAiB,GAAG,aAAa,CAAC;YAEvC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,EAAE,CAAC;YAC9C,IAAI,CAAC,kBAAkB,CAAC,yBAAyB,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;YAE/E,yHAAyH;YACzH,MAAM,UAAU,GAAyB,IAAI,CAAC,WAAW,EAAE,CAAC;YAC5D,IAAI,SAA8B,CAAC;YAEnC,IAAI;gBACA,MAAM,eAAe,GAAqB,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;gBAC7G,MAAM,MAAM,GAA0B,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;gBACpE,MAAM,UAAU,GAA6B,MAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;gBAC/E,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,KAAK,iBAAI,CAAC,WAAW,CAAC;gBAE/E,SAAS,GAAG,IAAI,gCAAmB,CAAC,eAAe,EAAE,MAAM,CAAC,cAAc,CAAC,CAAC;gBAC5E,MAAM,IAAI,CAAC,kBAAkB,CAAC,4BAA4B,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;gBAC7E,IAAI,CAAC,oBAAoB,CAAC,mBAAmB,CAAC,OAAO,CAAC,KAAK,GAAG,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC;aAExF;YAAC,OAAO,KAAK,EAAE;gBACZ,MAAM,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,CAAC;gBAClD,MAAM,KAAK,CAAC;aACf;YAED,IAAI;gBACA,MAAM,UAAU,CAAC;aACpB;YAAC,OAAO,KAAK,EAAE;gBACZ,MAAM,IAAI,CAAC,sBAAsB,CAAC,+BAAkB,CAAC,KAAK,EAAE,kCAAqB,CAAC,iBAAiB,EAAE,KAAe,CAAC,CAAC;gBACtH,OAAO;aACV;YAED,MAAM,qBAAqB,GAAqB,IAAI,6BAAgB,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;YAExG,IAAI,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE;gBACtC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,cAAc,EAAE,qBAAqB,CAAC,CAAC;aAClF;YAED,KAAK,IAAI,CAAC,cAAc,EAAE,CAAC;YAC3B,MAAM,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;YAEnD,gBAAgB,CAAC,KAAK,CAAC,CAAO,KAAa,EAAiB,EAAE;gBAC1D,MAAM,IAAI,CAAC,sBAAsB,CAAC,+BAAkB,CAAC,KAAK,EAAE,kCAAqB,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;YAC3G,CAAC,CAAA,CAAC,CAAC;YAEH,OAAO;QACX,CAAC;KAAA;IAEY,eAAe;;YACxB,IAAI,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE;gBACvC,IAAI;oBACA,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;oBACjC,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;oBAC5B,MAAM,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,CAAC;oBAClD,MAAM,IAAI,CAAC,kBAAkB,CAAC,qBAAqB,CAAC;iBACvD;wBAAS;oBACN,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC;iBAC3C;aACJ;YACD,OAAO;QACX,CAAC;KAAA;IAEY,OAAO;;YAChB,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;YACzB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;QAC7B,CAAC;KAAA;IAEM,YAAY,CAAC,EAAa,EAAE,GAAc;QAC7C,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,GAAS,EAAE;YAC/B,IAAI;gBACA,IAAI,CAAC,CAAC,EAAE,EAAE;oBACN,EAAE,EAAE,CAAC;iBACR;aACJ;YAAC,OAAO,CAAC,EAAE;gBACR,IAAI,CAAC,CAAC,GAAG,EAAE;oBACP,GAAG,CAAC,CAAC,CAAC,CAAC;iBACV;aACJ;QACL,CAAC,EAAE,CAAC,MAAW,EAAQ,EAAE;YACrB,IAAI;gBACA,IAAI,CAAC,CAAC,GAAG,EAAE;oBACP,GAAG,CAAC,MAAM,CAAC,CAAC;iBACf;gBACD,6BAA6B;aAChC;YAAC,OAAO,KAAK,EAAE;aACf;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAIY,UAAU;;YACnB,MAAM,IAAI,CAAC,sBAAsB,CAAC,+BAAkB,CAAC,KAAK,EACtD,kCAAqB,CAAC,OAAO,EAC7B,eAAe,CAAC,CAAC;YAErB,IAAI,IAAI,CAAC,kBAAkB,KAAK,SAAS,EAAE;gBACvC,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;aACnC;YAED,IAAI,IAAI,CAAC,qBAAqB,KAAK,SAAS,EAAE;gBAC1C,IAAI;oBACA,MAAM,CAAC,MAAM,IAAI,CAAC,qBAAqB,CAAC,CAAC,OAAO,EAAE,CAAC;iBACtD;gBAAC,OAAO,KAAK,EAAE;iBAEf;aACJ;YACD,IAAI,CAAC,qBAAqB,GAAG,SAAS,CAAC;QAC3C,CAAC;KAAA;IAOD,6DAA6D;IACtD,WAAW,CAAC,OAAe;QAC9B,OAAO;IACX,CAAC;IAEY,kBAAkB,CAAC,IAAY,EAAE,OAA6B;;YACvE,MAAM,IAAI,GAAgB,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,wBAAW,CAAC,IAAI,CAAC,CAAC,CAAC,wBAAW,CAAC,MAAM,CAAC;YAC9F,MAAM,WAAW,GAAW,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC;YAElF,MAAM,UAAU,GAAgB,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;YAC7D,OAAO,UAAU,CAAC,IAAI,CAAC,IAAI,6DAAuB,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC,CAAC;QAC7H,CAAC;KAAA;IAED,IAAW,gBAAgB,CAAC,cAAsB;QAC9C,IAAI,CAAC,oBAAoB,GAAG,cAAc,CAAC;IAC/C,CAAC;IAED,IAAW,gBAAgB;QACvB,OAAO,IAAI,CAAC,oBAAoB,CAAC;IACrC,CAAC;IAED,IAAW,+BAA+B,CAAC,KAAc;QACrD,IAAI,CAAC,mCAAmC,GAAG,KAAK,CAAC;IACrD,CAAC;IAOe,iBAAiB;;YAC7B,MAAM,aAAa,GAAG,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;YAC7D,IAAI,qBAAqB,CAAC,oBAAoB,KAAK,IAAI;gBACnD,IAAI,CAAC,cAAc;gBACnB,IAAI,KAAK,aAAa,EAAE;gBACxB,OAAO;aACV;YAED,IAAI,CAAC,CAAC,qBAAqB,CAAC,aAAa,EAAE;gBACvC,IAAI;oBACA,qBAAqB,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;oBACnD,6BAA6B;iBAChC;gBAAC,WAAM,GAAG;aACd;YAED,MAAM,UAAU,GAAgB,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;YAC7D,MAAM,UAAU,CAAC,IAAI,CAAC,IAAI,6DAAuB,CAC7C,wBAAW,CAAC,IAAI,EAChB,WAAW,EACX,IAAI,CAAC,kBAAkB,CAAC,SAAS,EACjC,kBAAkB,EAClB,aAAa,CAAC,CAAC,CAAC;QACxB,CAAC;KAAA;IAUD,uBAAuB;IACP,sBAAsB,CAClC,kBAAsC,EACtC,SAAgC,EAChC,KAAa;;YAEb,IAAI,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE;gBACzC,MAAM,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,CAAC;gBAElD,IAAI,CAAC,iBAAiB,CAClB,IAAI,CAAC,kBAAkB,CAAC,SAAS,EACjC,IAAI,CAAC,kBAAkB,CAAC,SAAS,EACjC,kBAAkB,EAClB,SAAS,EACT,KAAK,CAAC,CAAC;aACd;QACL,CAAC;KAAA;IAIe,cAAc;;YAC1B,IAAI;gBACA,IAAI,IAAI,CAAC,cAAc,EAAE;oBACrB,cAAc;oBACd,OAAO;iBACV;gBAED,IAAI,UAAU,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;gBAC9C,MAAM,OAAO,GAAG,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;gBAExC,IAAI,IAAI,CAAC,sBAAsB,KAAK,SAAS,EAAE;oBAC3C,OAAO,IAAI,CAAC,sBAAsB,EAAE,CAAC;iBACxC;gBAED,mEAAmE;gBACnE,IAAI,CAAC,OAAO,EAAE;oBACV,OAAO,IAAI,CAAC,cAAc,EAAE,CAAC;iBAChC;gBAED,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;gBACtC,MAAM,iBAAiB,GAAG,6DAAuB,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;gBAEjF,IAAI,iBAAiB,CAAC,SAAS,CAAC,WAAW,EAAE,KAAK,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE;oBAC/F,QAAQ,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE;wBAC1C,KAAK,YAAY;4BACb,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;4BACtC,IAAI,CAAC,kBAAkB,CAAC,0BAA0B,EAAE,CAAC;4BACrD,MAAM;wBAEV,KAAK,sBAAsB;4BACvB,MAAM,mBAAmB,GAAmB,2BAAc,CAAC,QAAQ,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;4BAChG,MAAM,oBAAoB,GAAG,IAAI,iCAAoB,CAAC,mBAAmB,CAAC,MAAM,EAAE,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;4BACrH,IAAI,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,mBAAmB,EAAE;gCAC3C,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,IAAI,CAAC,cAAc,EAAE,oBAAoB,CAAC,CAAC;6BACtF;4BACD,MAAM;wBAEV,KAAK,oBAAoB;4BACrB,IAAI,IAAY,CAAC;4BACjB,IAAI,iBAAiB,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;gCACvC,IAAI,GAAG,iBAAiB,CAAC,QAAQ,CAAC;6BACrC;iCAAM;gCACH,wDAAwD;gCACxD,IAAI,GAAG,eAAe,CAAC;6BAC1B;4BACD,MAAM,kBAAkB,GAAmB,2BAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;4BACzE,MAAM,mBAAmB,GAAG,IAAI,iCAAoB,CAAC,kBAAkB,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,EAAE,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;4BACpK,IAAI,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE;gCACzC,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,IAAI,CAAC,cAAc,EAAE,mBAAmB,CAAC,CAAC;6BACnF;4BACD,MAAM;wBAEV,KAAK,UAAU;4BACX,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;4BAC/B,IAAI,IAAI,CAAC,kBAAkB,CAAC,aAAa,IAAI,IAAI,CAAC,yBAAyB,EAAE;gCACzE,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;gCACvC,MAAM,IAAI,CAAC,sBAAsB,CAAC,+BAAkB,CAAC,WAAW,EAAE,kCAAqB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;6BAC/G;4BACD,MAAM,oBAAoB,GAAqB,IAAI,6BAAgB,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;4BACvG,MAAM,IAAI,CAAC,kBAAkB,CAAC,wBAAwB,CAAC,IAAI,CAAC,oBAAoB,CAAC,uBAAuB,CAAC,CAAC;4BAC1G,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,uBAAuB,IAAI,IAAI,CAAC,kBAAkB,CAAC,aAAa,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE;gCACvI,IAAI,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE;oCACtC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,cAAc,EAAE,oBAAoB,CAAC,CAAC;iCACjF;gCACD,OAAO;6BACV;iCAAM;gCACH,UAAU,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;gCAC1C,MAAM,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;6BAC7C;4BACD,MAAM;wBAEV;4BACI,IAAI,CAAC,CAAA,MAAM,IAAI,CAAC,2BAA2B,CAAC,iBAAiB,CAAC,CAAA,EAAE;gCAC5D,kGAAkG;gCAClG,IAAI,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE;oCAC1B,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,yBAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC;iCAClH;6BACJ;qBACR;iBACJ;gBACD,OAAO,IAAI,CAAC,cAAc,EAAE,CAAC;aAChC;YAAC,OAAO,KAAK,EAAE;gBACZ,OAAO,IAAI,CAAC;aACf;QACL,CAAC;KAAA;IAEO,mCAAmC;QACvC,MAAM,SAAS,GAAW,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,CAAC;QACvE,MAAM,aAAa,GAAW,SAAS,GAAG,IAAI,CAAC,qBAAqB,CAAC;QACrE,IAAI,CAAC,iBAAiB,CAAC,kCAAkC,CAAC,aAAa,CAAC,CAAC;IAC7E,CAAC;IAES,iBAAiB,CAAC,UAAuB,EAAE,oBAA6B;QAC9E,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC1B,IAAI,CAAC,mCAAmC,EAAE,CAAC;SAC9C;QACD,MAAM,iBAAiB,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;QACtD,IAAI,oBAAoB,EAAE;YACtB,IAAI,CAAC,kBAAkB,CAAC,eAAe,EAAE,CAAC;SAC7C;QAED,IAAI,iBAAiB,EAAE;YACnB,OAAO,UAAU,CAAC,IAAI,CAAC,IAAI,6DAAuB,CAC9C,wBAAW,CAAC,IAAI,EAChB,gBAAgB,EAChB,IAAI,CAAC,kBAAkB,CAAC,SAAS,EACjC,kBAAkB,EAClB,iBAAiB,CAAC,CAAC,CAAC;SAC3B;QACD,OAAO;IACX,CAAC;IAIS,IAAI;QACV,0BAA0B;QAC1B,OAAO;IACX,CAAC;IAED,iFAAiF;IACjE,kBAAkB,CAAC,UAAuB,EAAE,uBAAgC,IAAI;;YAC5F,IAAI,IAAI,CAAC,0BAA0B,KAAK,SAAS,EAAE;gBAC/C,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;aACtD;YAED,MAAM,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,oBAAoB,CAAC,CAAC;YAC/D,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YACtC,OAAO;QACX,CAAC;KAAA;IAEe,cAAc,CAAC,UAAuB;;YAClD,MAAM,MAAM,GAA0B,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACpE,4CAA4C;YAC5C,OAAO,UAAU,CAAC,IAAI,CAAC,IAAI,6DAAuB,CAC9C,wBAAW,CAAC,MAAM,EAClB,OAAO,EACP,IAAI,CAAC,kBAAkB,CAAC,SAAS,EACjC,aAAa,EACb,MAAM,CAAC,MAAM,CAChB,CAAC,CAAC;QACP,CAAC;KAAA;IAID,uDAAuD;IAC7C,WAAW;QACjB,IAAI,IAAI,CAAC,qBAAqB,KAAK,SAAS,EAAE;YAC1C,OAAO,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,UAAuB,EAAwB,EAAE;gBACrF,IAAI,UAAU,CAAC,KAAK,EAAE,KAAK,4BAAe,CAAC,YAAY,EAAE;oBACrD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;oBAC7B,IAAI,CAAC,qBAAqB,GAAG,SAAS,CAAC;oBACvC,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;oBACvC,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;iBAC7B;gBACD,OAAO,IAAI,CAAC,qBAAqB,CAAC;YACtC,CAAC,EAAE,GAAyB,EAAE;gBAC1B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;gBAC7B,IAAI,CAAC,qBAAqB,GAAG,SAAS,CAAC;gBACvC,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;gBACvC,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;YAC9B,CAAC,CAAC,CAAC;SACN;QAED,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAErD,8EAA8E;QAC9E,+DAA+D;QAC/D,gEAAgE;QAChE,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,GAAS,EAAE,GAAG,CAAC,CAAC,CAAC;QAElD,IAAI,IAAI,CAAC,uBAAuB,KAAK,SAAS,EAAE;YAC5C,OAAO,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;SACnE;QAED,OAAO,IAAI,CAAC,qBAAqB,CAAC;IACtC,CAAC;IAMS,uBAAuB,CAAC,UAAuB,EAAE,cAA8B,EAAE,uBAA+B;QACtH,cAAc,CAAC,eAAe,EAAE,CAAC;QACjC,oEAAoE;QACpE,IAAI,qBAAqB,CAAC,oBAAoB,KAAK,IAAI,EAAE;YACrD,MAAM,aAAa,GAAoC,IAAI,CAAC,KAAK,CAAC,uBAAuB,CAAoC,CAAC;YAE9H,MAAM,WAAW,GAAQ;gBACrB,OAAO,EAAE;oBACL,MAAM,EAAE,aAAa,CAAC,OAAO,CAAC,MAAM;iBACvC;aACJ,CAAC;YAEF,uBAAuB,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;SACzD;QAED,IAAI,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,WAAW,CAAC,sCAAsC,EAAE,OAAO,CAAC,CAAC,WAAW,EAAE,KAAK,MAAM,EAAE;YAC5H,MAAM,IAAI,GAAsE,IAAI,CAAC,KAAK,CAAC,uBAAuB,CAAsE,CAAC;YACzL,IAAI,CAAC,OAAO,CAAC,uBAAuB,GAAG,MAAM,CAAC;YAC9C,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC;YAC/B,uBAAuB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SAClD;QAED,IAAI,uBAAuB,EAAE;YACzB,OAAO,UAAU,CAAC,IAAI,CAAC,IAAI,6DAAuB,CAC9C,wBAAW,CAAC,IAAI,EAChB,eAAe,EACf,cAAc,CAAC,SAAS,EACxB,kBAAkB,EAClB,uBAAuB,CAAC,CAAC,CAAC;SACjC;QAED,OAAO;IACX,CAAC;IAEe,eAAe;;YAC3B,IAAI,IAAI,CAAC,kCAAkC,KAAK,SAAS,EAAE;gBACvD,OAAO,IAAI,CAAC,kCAAkC,CAAC,IAAI,CAAC,CAAC,UAAuB,EAAwB,EAAE;oBAClG,IAAI,UAAU,CAAC,KAAK,EAAE,KAAK,4BAAe,CAAC,YAAY,EAAE;wBACrD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;wBAC7B,IAAI,CAAC,kCAAkC,GAAG,SAAS,CAAC;wBACpD,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;wBACvC,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC;qBACjC;oBACD,OAAO,IAAI,CAAC,kCAAkC,CAAC;gBACnD,CAAC,EAAE,GAAyB,EAAE;oBAC1B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;oBAC7B,IAAI,CAAC,kCAAkC,GAAG,SAAS,CAAC;oBACpD,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;oBACvC,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC;gBAClC,CAAC,CAAC,CAAC;aACN;YAED,IAAI,CAAC,kCAAkC,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;YACrE,OAAO,MAAM,IAAI,CAAC,kCAAkC,CAAC;QACzD,CAAC;KAAA;IAEe,SAAS,CAAC,eAAiC;;YACvD,MAAM,WAAW,GAA0B,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACzE,IAAI,CAAC,qBAAqB,GAAG,WAAW,CAAC,cAAc,GAAG,IAAI,CAAC;YAC/D,6CAA6C;YAC7C,IAAI,YAAY,GAAW,IAAI,CAAC,GAAG,EAAE,CAAC;YAEtC,iDAAiD;YACjD,MAAM,cAAc,GAAW,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,WAAW,CAAC,sCAAsC,EAAE,MAAM,CAAC,CAAC;YAChI,MAAM,uBAAuB,GAAW,WAAW,CAAC,cAAc,GAAG,IAAI,GAAG,QAAQ,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;YACzG,MAAM,gBAAgB,GAAW,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC;YAErE,MAAM,kBAAkB,GAAG,GAAwB,EAAE;gBACjD,yCAAyC;gBACzC,IAAI,CAAC,IAAI,CAAC,cAAc;oBACpB,CAAC,IAAI,CAAC,kBAAkB,CAAC,aAAa;oBACtC,IAAI,CAAC,kBAAkB,CAAC,aAAa;oBACrC,IAAI,CAAC,kBAAkB,CAAC,WAAW,KAAK,gBAAgB,EAAE;oBAE1D,MAAM,UAAU,GAAgB,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;oBAC7D,MAAM,gBAAgB,GAA8B,MAAM,eAAe,CAAC,IAAI,EAAE,CAAC;oBACjF,uCAAuC;oBACvC,IAAI,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE;wBACvC,yEAAyE;wBACzE,OAAO;qBACV;oBAED,IAAI,OAAoB,CAAC;oBACzB,IAAI,SAAiB,CAAC;oBAEtB,IAAI,CAAC,gBAAgB,IAAI,gBAAgB,CAAC,KAAK,EAAE;wBAC7C,OAAO,GAAG,IAAI,CAAC;wBACf,SAAS,GAAG,CAAC,CAAC;qBACjB;yBAAM;wBACH,OAAO,GAAG,gBAAgB,CAAC,MAAM,CAAC;wBAElC,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;wBAExD,IAAI,uBAAuB,IAAI,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE;4BAC9D,SAAS,GAAG,CAAC,CAAC;yBACjB;6BAAM;4BACH,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;yBACtD;qBACJ;oBAED,IAAI,CAAC,KAAK,SAAS,EAAE;wBACjB,MAAM,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;qBAC/B;oBAED,IAAI,OAAO,KAAK,IAAI,EAAE;wBAClB,YAAY,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,OAAO,CAAC,UAAU,GAAG,IAAI,GAAG,CAAC,WAAW,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC;qBAC9F;oBAED,sBAAsB;oBACtB,IAAI,CAAC,IAAI,CAAC,cAAc;wBACpB,CAAC,IAAI,CAAC,kBAAkB,CAAC,aAAa;wBACtC,IAAI,CAAC,kBAAkB,CAAC,aAAa;wBACrC,IAAI,CAAC,kBAAkB,CAAC,WAAW,KAAK,gBAAgB,EAAE;wBAC1D,UAAU,CAAC,IAAI,CACX,IAAI,6DAAuB,CAAC,wBAAW,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,IAAI,EAAE,OAAO,CAAC,CAC7G,CAAC,KAAK,CAAC,GAAS,EAAE;4BACf,gEAAgE;4BAChE,IAAI,CAAC,kBAAkB,CAAC,wBAAwB,CAAC,IAAI,CAAC,oBAAoB,CAAC,uBAAuB,CAAC,CAAC,KAAK,CAAC,GAAS,EAAE,GAAG,CAAC,CAAC,CAAC;wBAC/H,CAAC,CAAC,CAAC;wBAEH,IAAI,EAAC,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,KAAK,CAAA,EAAE;4BAC1B,sCAAsC;4BACtC,8DAA8D;4BAC9D,+DAA+D;4BAC/D,oEAAoE;4BACpE,OAAO,kBAAkB,EAAE,CAAC;yBAC/B;6BAAM;4BACH,6DAA6D;4BAC7D,qBAAqB;4BACrB,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;gCACvB,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE,CAAC;6BAC3C;yBACJ;qBACJ;iBACJ;YACL,CAAC,CAAA,CAAC;YAEF,OAAO,kBAAkB,EAAE,CAAC;QAChC,CAAC;KAAA;IAEa,gBAAgB;;YAC1B,IAAI,cAAc,GAAY,KAAK,CAAC;YAEpC,IAAI,CAAC,oBAAoB,GAAG,6BAAgB,EAAE,CAAC;YAC/C,MAAM,SAAS,GAAW,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC;YAC5D,IAAI,CAAC,gBAAgB,GAAG,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,6BAAgB,EAAE,CAAC;YAEnF,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;YAC/F,IAAI,cAAc,GAAW,CAAC,CAAC;YAC/B,IAAI,UAAU,GAAW,EAAE,CAAC;YAE5B,OAAO,IAAI,CAAC,kBAAkB,CAAC,qBAAqB,IAAI,IAAI,CAAC,oBAAoB,CAAC,aAAa,EAAE;gBAE7F,iLAAiL;gBACjL,yFAAyF;gBACzF,MAAM,WAAW,GAAG,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;gBACjK,MAAM,IAAI,GAAa,MAAM,WAAW,CAAC;gBAEzC,MAAM,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;gBAErD,wBAAwB;gBACxB,MAAM,UAAU,GAAgB,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;gBAC1H,iCAAiC;gBACjC,IAAI,CAAC,kBAAkB,CAAC,yBAAyB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;gBAErE,qHAAqH;gBACrH,6BAA6B;gBAC7B,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAsB,EAAQ,EAAE;oBACtD,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBACzC,CAAC,CAAC,CAAC;gBAEH,MAAM,QAAQ,GAA2B,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;gBACjE,6BAA6B;gBAC7B,IAAI,QAAQ,CAAC,UAAU,KAAK,GAAG,EAAE;oBAC7B,MAAM,IAAI,CAAC,kBAAkB,CAAC,8BAA8B,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;oBAClF,OAAO,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;iBACtC;qBAAM,IAAI,QAAQ,CAAC,UAAU,KAAK,IAAI,EAAE;oBACrC,cAAc,GAAG,IAAI,CAAC;iBACzB;gBAED,cAAc,GAAG,QAAQ,CAAC,UAAU,CAAC;gBACrC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;gBAE7B,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,CAAC;aAC/C;YAED,MAAM,IAAI,CAAC,kBAAkB,CAAC,8BAA8B,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;YACzF,OAAO,OAAO,CAAC,MAAM,CAAC,yCAAyC,cAAc,KAAK,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,WAAW,CAAC,uBAAU,CAAC,gCAAgC,CAAC,YAAY,UAAU,EAAE,CAAC,CAAC;QAC7M,CAAC;KAAA;IAEO,KAAK,CAAC,OAAe;QACzB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAmB,EAAU,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;IAC/F,CAAC;IAEO,oBAAoB,CAAC,MAAmB;QAC5C,IAAI,GAAG,GAAW,eAAe,CAAC;QAClC,IAAI,IAAI,KAAK,MAAM,EAAE;YACjB,GAAG,IAAI,MAAM,CAAC;SACjB;aAAM;YACH,MAAM,QAAQ,GAAe,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC;YACpD,GAAG,IAAI,GAAG,MAAM,CAAC,UAAU,MAAM,CAAC;YAClC,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC,EAAE,EAAE;gBAChD,GAAG,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC;gBACvD,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,EAAE;oBACtB,sCAAsC;oBACtC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAClB,GAAG,GAAG,EAAE,CAAC;iBACZ;aACJ;SACJ;QACD,sCAAsC;QACtC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACtB,CAAC;IAEa,cAAc;;YACxB,MAAM,UAAU,GAAgB,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;YAC7D,MAAM,UAAU,CAAC,IAAI,CAAC,IAAI,6DAAuB,CAAC,wBAAW,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;YAC/H,OAAO;QACX,CAAC;KAAA;IAED,wGAAwG;IAC1F,mBAAmB;;YAC7B,MAAM,UAAU,GAAgB,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;YACzD,IAAI,IAAI,CAAC,wBAAwB,KAAK,SAAS,EAAE;gBAC7C,OAAO,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;aACpD;YACD,MAAM,IAAI,CAAC,uBAAuB,CAAC,UAAU,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,oBAAoB,CAAC,mBAAmB,CAAC,SAAS,EAAE,CAAC,CAAC;YACnI,MAAM,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;YACjD,OAAO,UAAU,CAAC;QACtB,CAAC;KAAA;;AAr4BL,sDAs4BC;AA/eiB,0CAAoB,GAAY,IAAI,CAAC","file":"ServiceRecognizerBase.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\r\nimport { ConnectionOpenResponse } from \"../common/ConnectionOpenResponse.js\";\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    IDisposable,\r\n    IStreamChunk,\r\n    MessageType,\r\n    ServiceEvent,\r\n    Timeout\r\n} from \"../common/Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeakerRecognitionResult,\r\n    SpeechRecognitionResult,\r\n    OutputFormat\r\n} from \"../sdk/Exports.js\";\r\nimport { Callback } from \"../sdk/Transcription/IConversation.js\";\r\nimport {\r\n    AgentConfig,\r\n    DynamicGrammarBuilder,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionMode,\r\n    RequestSession,\r\n    SpeechContext,\r\n    SpeechDetected,\r\n    type,\r\n    OutputFormatPropertyName\r\n} from \"./Exports.js\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication,\r\n} from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\ninterface CustomModel {\r\n    language: string;\r\n    endpoint: string;\r\n}\r\n\r\nexport interface PhraseDetection {\r\n    customModels?: CustomModel[];\r\n    onInterim?: { action: string };\r\n    onSuccess?: { action: string };\r\n    mode?: string;\r\n    INTERACTIVE?: Segmentation;\r\n    CONVERSATION?: Segmentation;\r\n    DICTATION?: Segmentation;\r\n    speakerDiarization?: SpeakerDiarization;\r\n}\r\n\r\nexport interface SpeakerDiarization {\r\n    mode?: string;\r\n    audioSessionId?: string;\r\n    audioOffsetMs?: number;\r\n    identityProvider?: string;\r\n}\r\n\r\nexport interface Segmentation {\r\n    segmentation: {\r\n        mode: \"Custom\";\r\n        segmentationSilenceTimeoutMs: number;\r\n    };\r\n}\r\n\r\nexport abstract class ServiceRecognizerBase implements IDisposable {\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection> = undefined;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection> = undefined;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privMustReportEndOfStream: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n    private privAgentConfig: AgentConfig;\r\n    private privServiceHasSentMessage: boolean;\r\n    private privActivityTemplate: string;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number = setTimeout;\r\n    private privAudioSource: IAudioSource;\r\n    private privIsLiveAudio: boolean = false;\r\n    private privAverageBytesPerMs: number = 0;\r\n    protected privSpeechContext: SpeechContext;\r\n    protected privRequestSession: RequestSession;\r\n    protected privConnectionId: string;\r\n    protected privDiarizationSessionId: string;\r\n    protected privRecognizerConfig: RecognizerConfig;\r\n    protected privRecognizer: Recognizer;\r\n    protected privSuccessCallback: (e: SpeechRecognitionResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n    protected privEnableSpeakerId: boolean = false;\r\n    protected privExpectContentAssessmentResponse: boolean = false;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!audioSource) {\r\n            throw new ArgumentNullError(\"audioSource\");\r\n        }\r\n\r\n        if (!recognizerConfig) {\r\n            throw new ArgumentNullError(\"recognizerConfig\");\r\n        }\r\n\r\n        this.privEnableSpeakerId = recognizerConfig.isSpeakerDiarizationEnabled;\r\n        this.privMustReportEndOfStream = false;\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privAudioSource = audioSource;\r\n        this.privRecognizerConfig = recognizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privRecognizer = recognizer;\r\n        this.privRequestSession = new RequestSession(this.privAudioSource.id());\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privDynamicGrammar = new DynamicGrammarBuilder();\r\n        this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\r\n        this.privAgentConfig = new AgentConfig();\r\n        const webWorkerLoadType: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.WebWorkerLoadType, \"on\").toLowerCase();\r\n        if (webWorkerLoadType === \"on\" && typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\r\n            this.privSetTimeout = Timeout.setTimeout;\r\n        } else {\r\n            if (typeof window !== \"undefined\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privSetTimeout = window.setTimeout.bind(window);\r\n            }\r\n        }\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode === 1003 ||\r\n                    connectionClosedEvent.statusCode === 1007 ||\r\n                    connectionClosedEvent.statusCode === 1002 ||\r\n                    connectionClosedEvent.statusCode === 4000 ||\r\n                    this.privRequestSession.numConnectionAttempts > this.privRecognizerConfig.maxRetryCount\r\n                ) {\r\n                    void this.cancelRecognitionLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\r\n                }\r\n            }\r\n        });\r\n\r\n        if (this.privEnableSpeakerId) {\r\n            this.privDiarizationSessionId = createNoDashGuid();\r\n        }\r\n\r\n        this.setLanguageIdJson();\r\n        this.setOutputDetailLevelJson();\r\n    }\r\n\r\n    protected setTranslationJson(): void {\r\n        const targetLanguages: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined);\r\n        if (targetLanguages !== undefined) {\r\n            const languages = targetLanguages.split(\",\");\r\n            const translationVoice: string =  this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n            const action = ( translationVoice !== undefined ) ? \"Synthesize\" : \"None\";\r\n            this.privSpeechContext.setSection(\"translation\", {\r\n                onSuccess: { action },\r\n                output: { interimResults: { mode: \"Always\" } },\r\n                targetLanguages: languages,\r\n            });\r\n\r\n            if (translationVoice !== undefined) {\r\n                const languageToVoiceMap: { [key: string]: string } = {};\r\n                for (const lang of languages) {\r\n                    languageToVoiceMap[lang] = translationVoice;\r\n                }\r\n                this.privSpeechContext.setSection(\"synthesis\", {\r\n                    defaultVoices: languageToVoiceMap\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setSpeechSegmentationTimeoutJson(): void {\r\n        const speechSegmentationTimeout: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.Speech_SegmentationSilenceTimeoutMs, undefined);\r\n        if (speechSegmentationTimeout !== undefined) {\r\n            const mode = this.recognitionMode === RecognitionMode.Conversation ? \"CONVERSATION\" :\r\n                this.recognitionMode === RecognitionMode.Dictation ? \"DICTATION\" : \"INTERACTIVE\";\r\n            const segmentationSilenceTimeoutMs: number = parseInt(speechSegmentationTimeout, 10);\r\n            const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\") as PhraseDetection;\r\n            phraseDetection.mode = mode;\r\n            phraseDetection[mode] = {\r\n                segmentation: {\r\n                    mode: \"Custom\",\r\n                    segmentationSilenceTimeoutMs\r\n                }\r\n            };\r\n            this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\r\n        }\r\n    }\r\n\r\n    protected setLanguageIdJson(): void {\r\n        const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\") as PhraseDetection;\r\n        if (this.privRecognizerConfig.autoDetectSourceLanguages !== undefined) {\r\n            const sourceLanguages: string[] = this.privRecognizerConfig.autoDetectSourceLanguages.split(\",\");\r\n\r\n            let speechContextLidMode;\r\n            if (this.privRecognizerConfig.languageIdMode === \"Continuous\") {\r\n                speechContextLidMode = \"DetectContinuous\";\r\n            } else {// recognizerConfig.languageIdMode === \"AtStart\"\r\n                speechContextLidMode = \"DetectAtAudioStart\";\r\n            }\r\n\r\n            this.privSpeechContext.setSection(\"languageId\", {\r\n                Priority: \"PrioritizeLatency\",\r\n                languages: sourceLanguages,\r\n                mode: speechContextLidMode,\r\n                onSuccess: { action: \"Recognize\" },\r\n                onUnknown: { action: \"None\" }\r\n            });\r\n            this.privSpeechContext.setSection(\"phraseOutput\", {\r\n                interimResults: {\r\n                    resultType: \"Auto\"\r\n                },\r\n                phraseResults: {\r\n                    resultType: \"Always\"\r\n                }\r\n            });\r\n            const customModels: CustomModel[] = this.privRecognizerConfig.sourceLanguageModels;\r\n            if (customModels !== undefined) {\r\n                phraseDetection.customModels = customModels;\r\n                phraseDetection.onInterim = { action: \"None\" };\r\n                phraseDetection.onSuccess = { action: \"None\" };\r\n            }\r\n        }\r\n        const targetLanguages: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined);\r\n        if (targetLanguages !== undefined) {\r\n            phraseDetection.onInterim = { action: \"Translate\" };\r\n            phraseDetection.onSuccess = { action: \"Translate\" };\r\n            this.privSpeechContext.setSection(\"phraseOutput\", {\r\n                interimResults: {\r\n                    resultType: \"None\"\r\n                },\r\n                phraseResults: {\r\n                    resultType: \"None\"\r\n                }\r\n            });\r\n        }\r\n\r\n        this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\r\n    }\r\n\r\n    protected setOutputDetailLevelJson(): void {\r\n        if (this.privEnableSpeakerId) {\r\n            const requestWordLevelTimestamps: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"false\").toLowerCase();\r\n            if (requestWordLevelTimestamps === \"true\") {\r\n                this.privSpeechContext.setWordLevelTimings();\r\n            } else {\r\n                const outputFormat: string = this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n                if (outputFormat === OutputFormat[OutputFormat.Detailed].toLocaleLowerCase()) {\r\n                    this.privSpeechContext.setDetailedOutputFormat();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public get isSpeakerDiarizationEnabled(): boolean {\r\n        return this.privEnableSpeakerId;\r\n    }\r\n\r\n    public get audioSource(): IAudioSource {\r\n        return this.privAudioSource;\r\n    }\r\n\r\n    public get speechContext(): SpeechContext {\r\n        return this.privSpeechContext;\r\n    }\r\n\r\n    public get dynamicGrammar(): DynamicGrammarBuilder {\r\n        return this.privDynamicGrammar;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public set conversationTranslatorToken(token: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.ConversationTranslator_Token, token);\r\n    }\r\n\r\n    public set voiceProfileType(type: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.SpeechServiceConnection_SpeakerIdMode, type);\r\n    }\r\n\r\n    public set authentication(auth: IAuthentication) {\r\n        this.privAuthentication = auth;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            try {\r\n                const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n                await connection.dispose(reason);\r\n            } catch (error) {\r\n                // The connection is in a bad state. But we're trying to kill it, so...\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognizerConfig.recognitionMode;\r\n    }\r\n\r\n    protected recognizeOverride: (recoMode: RecognitionMode, sc: (e: SpeechRecognitionResult) => void, ec: (e: string) => void) => Promise<void> = undefined;\r\n\r\n    public recognizeSpeaker: (model: SpeakerRecognitionModel) => Promise<SpeakerRecognitionResult> = undefined;\r\n\r\n    public async recognize(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n    ): Promise<void> {\r\n\r\n        if (this.recognizeOverride !== undefined) {\r\n            await this.recognizeOverride(recoMode, successCallback, errorCallBack);\r\n            return;\r\n        }\r\n        // Clear the existing configuration promise to force a re-transmission of config and context.\r\n        this.privConnectionConfigurationPromise = undefined;\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n        this.setSpeechSegmentationTimeoutJson();\r\n        this.setTranslationJson();\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        let audioNode: ReplayableAudioNode;\r\n\r\n        try {\r\n            const audioStreamNode: IAudioStreamNode = await this.audioSource.attach(this.privRequestSession.audioNodeId);\r\n            const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n            const deviceInfo: ISpeechConfigAudioDevice = await this.audioSource.deviceInfo;\r\n            this.privIsLiveAudio = deviceInfo.type && deviceInfo.type === type.Microphones;\r\n\r\n            audioNode = new ReplayableAudioNode(audioStreamNode, format.avgBytesPerSec);\r\n            await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n            this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        } catch (error) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n            throw error;\r\n        }\r\n\r\n        try {\r\n            await conPromise;\r\n        } catch (error) {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error as string);\r\n            return;\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        audioSendPromise.catch(async (error: string): Promise<void> => {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return;\r\n    }\r\n\r\n    public async stopRecognizing(): Promise<void> {\r\n        if (this.privRequestSession.isRecognizing) {\r\n            try {\r\n                await this.audioSource.turnOff();\r\n                await this.sendFinalAudio();\r\n                await this.privRequestSession.onStopRecognizing();\r\n                await this.privRequestSession.turnCompletionPromise;\r\n            } finally {\r\n                await this.privRequestSession.dispose();\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public connectAsync(cb?: Callback, err?: Callback): void {\r\n        this.connectImpl().then((): void => {\r\n            try {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n        }, (reason: any): void => {\r\n            try {\r\n                if (!!err) {\r\n                    err(reason);\r\n                }\r\n                /* eslint-disable no-empty */\r\n            } catch (error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    protected disconnectOverride: () => Promise<void> = undefined;\r\n\r\n    public async disconnect(): Promise<void> {\r\n        await this.cancelRecognitionLocal(CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        if (this.disconnectOverride !== undefined) {\r\n            await this.disconnectOverride();\r\n        }\r\n\r\n        if (this.privConnectionPromise !== undefined) {\r\n            try {\r\n                await (await this.privConnectionPromise).dispose();\r\n            } catch (error) {\r\n\r\n            }\r\n        }\r\n        this.privConnectionPromise = undefined;\r\n    }\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public sendMessage(message: string): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privRequestSession.requestId, contentType, payload));\r\n    }\r\n\r\n    public set activityTemplate(messagePayload: string) {\r\n        this.privActivityTemplate = messagePayload;\r\n    }\r\n\r\n    public get activityTemplate(): string {\r\n        return this.privActivityTemplate;\r\n    }\r\n\r\n    public set expectContentAssessmentResponse(value: boolean) {\r\n        this.privExpectContentAssessmentResponse = value;\r\n    }\r\n\r\n    protected abstract processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        successCallback?: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack?: (e: string) => void): Promise<boolean>;\r\n\r\n    protected async sendTelemetryData(): Promise<void> {\r\n        const telemetryData = this.privRequestSession.getTelemetry();\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true ||\r\n            this.privIsDisposed ||\r\n            null === telemetryData) {\r\n            return;\r\n        }\r\n\r\n        if (!!ServiceRecognizerBase.telemetryData) {\r\n            try {\r\n                ServiceRecognizerBase.telemetryData(telemetryData);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"telemetry\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json\",\r\n            telemetryData));\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected abstract cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void;\r\n\r\n    // Cancels recognition.\r\n    protected async cancelRecognitionLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): Promise<void> {\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n\r\n            this.cancelRecognition(\r\n                this.privRequestSession.sessionId,\r\n                this.privRequestSession.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    protected receiveMessageOverride: () => Promise<void> = undefined;\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            let connection = await this.fetchConnection();\r\n            const message = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                return this.receiveMessage();\r\n            }\r\n\r\n            this.privServiceHasSentMessage = true;\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privMustReportEndOfStream = true;\r\n                        this.privRequestSession.onServiceTurnStartResponse();\r\n                        break;\r\n\r\n                    case \"speech.startdetected\":\r\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechStartDetected) {\r\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"speech.enddetected\":\r\n                        let json: string;\r\n                        if (connectionMessage.textBody.length > 0) {\r\n                            json = connectionMessage.textBody;\r\n                        } else {\r\n                            // If the request was empty, the JSON returned is empty.\r\n                            json = \"{ Offset: 0 }\";\r\n                        }\r\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechEndDetected) {\r\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"turn.end\":\r\n                        await this.sendTelemetryData();\r\n                        if (this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream) {\r\n                            this.privMustReportEndOfStream = false;\r\n                            await this.cancelRecognitionLocal(CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined);\r\n                        }\r\n                        const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                        await this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);\r\n                        if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                            if (!!this.privRecognizer.sessionStopped) {\r\n                                this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                            }\r\n                            return;\r\n                        } else {\r\n                            connection = await this.fetchConnection();\r\n                            await this.sendPrePayloadJSON(connection);\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        if (!await this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n                }\r\n            }\r\n            return this.receiveMessage();\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private updateSpeakerDiarizationAudioOffset(): void {\r\n        const bytesSent: number = this.privRequestSession.recognitionBytesSent;\r\n        const audioOffsetMs: number = bytesSent / this.privAverageBytesPerMs;\r\n        this.privSpeechContext.setSpeakerDiarizationAudioOffsetMs(audioOffsetMs);\r\n    }\r\n\r\n    protected sendSpeechContext(connection: IConnection, generateNewRequestId: boolean): Promise<void> {\r\n        if (this.privEnableSpeakerId) {\r\n            this.updateSpeakerDiarizationAudioOffset();\r\n        }\r\n        const speechContextJson = this.speechContext.toJSON();\r\n        if (generateNewRequestId) {\r\n            this.privRequestSession.onSpeechContext();\r\n        }\r\n\r\n        if (speechContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.context\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected sendPrePayloadJSONOverride: (connection: IConnection) => Promise<void> = undefined;\r\n\r\n    protected noOp(): Promise<void> {\r\n        // operation not supported\r\n        return;\r\n    }\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendPrePayloadJSON(connection: IConnection, generateNewRequestId: boolean = true): Promise<void> {\r\n        if (this.sendPrePayloadJSONOverride !== undefined) {\r\n            return this.sendPrePayloadJSONOverride(connection);\r\n        }\r\n\r\n        await this.sendSpeechContext(connection, generateNewRequestId);\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected async sendWaveHeader(connection: IConnection): Promise<void> {\r\n        const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n        // this.writeBufferToConsole(format.header);\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Binary,\r\n            \"audio\",\r\n            this.privRequestSession.requestId,\r\n            \"audio/x-wav\",\r\n            format.header\r\n        ));\r\n    }\r\n\r\n    protected postConnectImplOverride: (connection: Promise<IConnection>) => Promise<IConnection> = undefined;\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    protected connectImpl(): Promise<IConnection> {\r\n        if (this.privConnectionPromise !== undefined) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = undefined;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n\r\n        this.privConnectionPromise = this.retryableConnect();\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this.privConnectionPromise.catch((): void => { });\r\n\r\n        if (this.postConnectImplOverride !== undefined) {\r\n            return this.postConnectImplOverride(this.privConnectionPromise);\r\n        }\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => Promise<IConnection> = undefined;\r\n    protected handleSpeechPhraseMessage: (textBody: string) => Promise<void> = undefined;\r\n    protected handleSpeechHypothesisMessage: (textBody: string) => void = undefined;\r\n\r\n    protected sendSpeechServiceConfig(connection: IConnection, requestSession: RequestSession, SpeechServiceConfigJson: string): Promise<void> {\r\n        requestSession.onSpeechContext();\r\n        // filter out anything that is not required for the service to work.\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\r\n            const withTelemetry: { context: { system: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { system: string } };\r\n\r\n            const replacement: any = {\r\n                context: {\r\n                    system: withTelemetry.context.system,\r\n                },\r\n            };\r\n\r\n            SpeechServiceConfigJson = JSON.stringify(replacement);\r\n        }\r\n\r\n        if (this.privRecognizerConfig.parameters.getProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"false\").toLowerCase() === \"true\") {\r\n            const json: { context: { DisableReferenceChannel: string; MicSpec: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { DisableReferenceChannel: string; MicSpec: string } };\r\n            json.context.DisableReferenceChannel = \"True\";\r\n            json.context.MicSpec = \"1_0_0\";\r\n            SpeechServiceConfigJson = JSON.stringify(json);\r\n        }\r\n\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                requestSession.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    protected async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = undefined;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    protected async sendAudio(audioStreamNode: IAudioStreamNode): Promise<void> {\r\n        const audioFormat: AudioStreamFormatImpl = await this.audioSource.format;\r\n        this.privAverageBytesPerMs = audioFormat.avgBytesPerSec / 1000;\r\n        // The time we last sent data to the service.\r\n        let nextSendTime: number = Date.now();\r\n\r\n        // Max amount to send before we start to throttle\r\n        const fastLaneSizeMs: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\r\n        const maxSendUnthrottledBytes: number = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\r\n        const startRecogNumber: number = this.privRequestSession.recogNumber;\r\n\r\n        const readAndUploadCycle = async (): Promise<void> => {\r\n            // If speech is done, stop sending audio.\r\n            if (!this.privIsDisposed &&\r\n                !this.privRequestSession.isSpeechEnded &&\r\n                this.privRequestSession.isRecognizing &&\r\n                this.privRequestSession.recogNumber === startRecogNumber) {\r\n\r\n                const connection: IConnection = await this.fetchConnection();\r\n                const audioStreamChunk: IStreamChunk<ArrayBuffer> = await audioStreamNode.read();\r\n                // we have a new audio chunk to upload.\r\n                if (this.privRequestSession.isSpeechEnded) {\r\n                    // If service already recognized audio end then don't send any more audio\r\n                    return;\r\n                }\r\n\r\n                let payload: ArrayBuffer;\r\n                let sendDelay: number;\r\n\r\n                if (!audioStreamChunk || audioStreamChunk.isEnd) {\r\n                    payload = null;\r\n                    sendDelay = 0;\r\n                } else {\r\n                    payload = audioStreamChunk.buffer;\r\n\r\n                    this.privRequestSession.onAudioSent(payload.byteLength);\r\n\r\n                    if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {\r\n                        sendDelay = 0;\r\n                    } else {\r\n                        sendDelay = Math.max(0, nextSendTime - Date.now());\r\n                    }\r\n                }\r\n\r\n                if (0 !== sendDelay) {\r\n                    await this.delay(sendDelay);\r\n                }\r\n\r\n                if (payload !== null) {\r\n                    nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));\r\n                }\r\n\r\n                // Are we still alive?\r\n                if (!this.privIsDisposed &&\r\n                    !this.privRequestSession.isSpeechEnded &&\r\n                    this.privRequestSession.isRecognizing &&\r\n                    this.privRequestSession.recogNumber === startRecogNumber) {\r\n                    connection.send(\r\n                        new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, payload)\r\n                    ).catch((): void => {\r\n                        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                        this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition).catch((): void => { });\r\n                    });\r\n\r\n                    if (!audioStreamChunk?.isEnd) {\r\n                        // this.writeBufferToConsole(payload);\r\n                        // Regardless of success or failure, schedule the next upload.\r\n                        // If the underlying connection was broken, the next cycle will\r\n                        // get a new connection and re-transmit missing audio automatically.\r\n                        return readAndUploadCycle();\r\n                    } else {\r\n                        // the audio stream has been closed, no need to schedule next\r\n                        // read-upload cycle.\r\n                        if (!this.privIsLiveAudio) {\r\n                            this.privRequestSession.onSpeechEnded();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        return readAndUploadCycle();\r\n    }\r\n\r\n    private async retryableConnect(): Promise<IConnection> {\r\n        let isUnAuthorized: boolean = false;\r\n\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        const sessionId: string = this.privRequestSession.sessionId;\r\n        this.privConnectionId = (sessionId !== undefined) ? sessionId : createNoDashGuid();\r\n\r\n        this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n        let lastStatusCode: number = 0;\r\n        let lastReason: string = \"\";\r\n\r\n        while (this.privRequestSession.numConnectionAttempts <= this.privRecognizerConfig.maxRetryCount) {\r\n\r\n            // Get the auth information for the connection. This is a bit of overkill for the current API surface, but leaving the plumbing in place to be able to raise a developer-customer\r\n            // facing event when a connection fails to let them try and provide new auth information.\r\n            const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n            const auth: AuthInfo = await authPromise;\r\n\r\n            await this.privRequestSession.onAuthCompleted(false);\r\n\r\n            // Create the connection\r\n            const connection: IConnection = this.privConnectionFactory.create(this.privRecognizerConfig, auth, this.privConnectionId);\r\n            // Attach the telemetry handlers.\r\n            this.privRequestSession.listenForServiceTelemetry(connection.events);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent): void => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n\r\n            const response: ConnectionOpenResponse = await connection.open();\r\n            // 200 == everything is fine.\r\n            if (response.statusCode === 200) {\r\n                await this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 1006) {\r\n                isUnAuthorized = true;\r\n            }\r\n\r\n            lastStatusCode = response.statusCode;\r\n            lastReason = response.reason;\r\n\r\n            this.privRequestSession.onRetryConnection();\r\n        }\r\n\r\n        await this.privRequestSession.onConnectionEstablishCompleted(lastStatusCode, lastReason);\r\n        return Promise.reject(`Unable to contact server. StatusCode: ${lastStatusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${lastReason}`);\r\n    }\r\n\r\n    private delay(delayMs: number): Promise<void> {\r\n        return new Promise((resolve: () => void): number => this.privSetTimeout(resolve, delayMs));\r\n    }\r\n\r\n    private writeBufferToConsole(buffer: ArrayBuffer): void {\r\n        let out: string = \"Buffer Size: \";\r\n        if (null === buffer) {\r\n            out += \"null\";\r\n        } else {\r\n            const readView: Uint8Array = new Uint8Array(buffer);\r\n            out += `${buffer.byteLength}\\r\\n`;\r\n            for (let i: number = 0; i < buffer.byteLength; i++) {\r\n                out += readView[i].toString(16).padStart(2, \"0\") + \" \";\r\n                if (((i + 1) % 16) === 0) {\r\n                    // eslint-disable-next-line no-console\r\n                    console.info(out);\r\n                    out = \"\";\r\n                }\r\n            }\r\n        }\r\n        // eslint-disable-next-line no-console\r\n        console.info(out);\r\n    }\r\n\r\n    private async sendFinalAudio(): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, null));\r\n        return;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\r\n        await this.sendPrePayloadJSON(connection, false);\r\n        return connection;\r\n    }\r\n}\r\n"]}