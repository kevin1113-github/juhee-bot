{"version":3,"sources":["src/common.speech/ConversationServiceRecognizer.ts"],"names":[],"mappings":"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","file":"ConversationServiceRecognizer.js","sourcesContent":["import { IAudioSource } from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    ResultReason,\r\n    SpeechRecognitionResult\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis\r\n} from \"./Exports.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\nexport class ConversationServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.handleSpeechPhraseMessage = async (textBody: string): Promise<void> => this.handleSpeechPhrase(textBody);\r\n        this.handleSpeechHypothesisMessage = (textBody: string): void => this.handleSpeechHypothesis(textBody);\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n        void connectionMessage;\r\n        return;\r\n    }\r\n\r\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\r\n        void result;\r\n        void offset;\r\n        void sessionId;\r\n        return;\r\n    }\r\n\r\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, duration: number, sessionId: string): void {\r\n        void result;\r\n        void duration;\r\n        void sessionId;\r\n        return;\r\n    }\r\n\r\n    protected async processSpeechMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n        let processed: boolean = false;\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                if (!!this.handleSpeechHypothesisMessage) {\r\n                    this.handleSpeechHypothesisMessage(connectionMessage.textBody);\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                if (!!this.handleSpeechPhraseMessage) {\r\n                    await this.handleSpeechPhraseMessage(connectionMessage.textBody);\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n            // Implementing to allow inheritance\r\n            void sessionId;\r\n            void requestId;\r\n            void cancellationReason;\r\n            void errorCode;\r\n            void error;\r\n        }\r\n\r\n    protected async handleSpeechPhrase(textBody: string): Promise<void> {\r\n\r\n        const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(textBody);\r\n        const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, textBody);\r\n        const simpleOffset = simple.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n        let offset = simpleOffset;\r\n\r\n        this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n        if (ResultReason.Canceled === resultReason) {\r\n            const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n            const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n            await this.cancelRecognitionLocal(\r\n                cancelReason,\r\n                cancellationErrorCode,\r\n                EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n        } else {\r\n            if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                    result = new SpeechRecognitionResult(\r\n                        this.privRequestSession.requestId,\r\n                        resultReason,\r\n                        simple.DisplayText,\r\n                        simple.Duration,\r\n                        simpleOffset,\r\n                        simple.Language,\r\n                        simple.LanguageDetectionConfidence,\r\n                        simple.SpeakerId,\r\n                        undefined,\r\n                        textBody,\r\n                        resultProps);\r\n                } else {\r\n                    const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(textBody);\r\n                    const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                    const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                    result = new SpeechRecognitionResult(\r\n                        this.privRequestSession.requestId,\r\n                        resultReason,\r\n                        detailed.Text,\r\n                        detailed.Duration,\r\n                        totalOffset,\r\n                        detailed.Language,\r\n                        detailed.LanguageDetectionConfidence,\r\n                        detailed.SpeakerId,\r\n                        undefined,\r\n                        offsetCorrectedJson,\r\n                        resultProps);\r\n\r\n                        offset = result.offset;\r\n                }\r\n\r\n                this.handleRecognizedCallback(result, offset, this.privRequestSession.sessionId);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected handleSpeechHypothesis(textBody: string): void {\r\n        const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(textBody);\r\n        const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, textBody);\r\n\r\n        const result = new SpeechRecognitionResult(\r\n            this.privRequestSession.requestId,\r\n            ResultReason.RecognizingSpeech,\r\n            hypothesis.Text,\r\n            hypothesis.Duration,\r\n            offset,\r\n            hypothesis.Language,\r\n            hypothesis.LanguageDetectionConfidence,\r\n            hypothesis.SpeakerId,\r\n            undefined,\r\n            textBody,\r\n            resultProps);\r\n\r\n        this.privRequestSession.onHypothesis(offset);\r\n\r\n        this.handleRecognizingCallback(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n    }\r\n}\r\n"]}