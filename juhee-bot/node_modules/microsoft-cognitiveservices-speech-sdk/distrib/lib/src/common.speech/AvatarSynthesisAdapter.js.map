{"version":3,"sources":["src/common.speech/AvatarSynthesisAdapter.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;;AAElC,kDAM2B;AAC3B,6CAMsB;AAGtB,MAAa,sBAAuB,SAAQ,iCAAoB;IAI5D,YACI,cAA+B,EAC/B,iBAA8C,EAC9C,iBAAoC,EACpC,iBAAoC,EACpC,YAA0B;QAG1B,KAAK,CAAC,cAAc,EAAE,iBAAiB,EACnC,iBAAiB,EAAE,SAAS,CAAC,CAAC;QAClC,IAAI,CAAC,qBAAqB,GAAG,iBAAiB,CAAC;QAC/C,IAAI,CAAC,eAAe,GAAG,iBAAgC,CAAC;QACxD,IAAI,CAAC,gBAAgB,GAAG,YAAY,CAAC;IACzC,CAAC;IAES,mCAAmC;QACzC,IAAI,CAAC,oBAAoB,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;IAC7D,CAAC;IAES,+BAA+B;;QACrC,IAAI,CAAC,qBAAqB,CAAC,qBAAqB,GAAG;YAC/C,MAAM,EAAE;gBACJ,OAAO,QAAE,IAAI,CAAC,gBAAgB,CAAC,WAAW,0CAAE,OAAO;gBACnD,KAAK,QAAE,IAAI,CAAC,gBAAgB,CAAC,WAAW,0CAAE,KAAK;gBAC/C,IAAI,EAAE;oBACF,WAAW,EAAE;wBACT,CAAC,oBAAE,IAAI,CAAC,gBAAgB,CAAC,WAAW,0CAAE,SAAS,0CAAE,WAAW,0CAAE,CAAC;wBAC/D,CAAC,oBAAE,IAAI,CAAC,gBAAgB,CAAC,WAAW,0CAAE,SAAS,0CAAE,WAAW,0CAAE,CAAC;qBAClE;oBACD,OAAO,EAAE;wBACL,CAAC,oBAAE,IAAI,CAAC,gBAAgB,CAAC,WAAW,0CAAE,SAAS,0CAAE,OAAO,0CAAE,CAAC;wBAC3D,CAAC,oBAAE,IAAI,CAAC,gBAAgB,CAAC,WAAW,0CAAE,SAAS,0CAAE,OAAO,0CAAE,CAAC;qBAC9D;iBACJ;gBACD,UAAU,EAAE;oBACR,MAAM,QAAE,IAAI,CAAC,gBAAgB,CAAC,WAAW,0CAAE,MAAM;oBACjD,KAAK,QAAE,IAAI,CAAC,gBAAgB,CAAC,WAAW,0CAAE,KAAK;iBAClD;aACJ;YACD,QAAQ,EAAE;gBACN,IAAI,EAAE,QAAQ;gBACd,YAAY,EAAE;oBACV,iBAAiB,EAAE,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,WAAW,CAAC,uBAAU,CAAC,+BAA+B,CAAC,CAAC;oBACtH,UAAU,EAAE,IAAI,CAAC,qBAAqB,CAAC,UAAU;iBACpD;aACJ;YACD,aAAa,EAAE;gBACX,UAAU,EAAE;oBACR,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,eAAe;iBAC/C;gBACD,SAAS,EAAE,IAAI,CAAC,gBAAgB,CAAC,SAAS;gBAC1C,UAAU,EAAE,IAAI,CAAC,gBAAgB,CAAC,UAAU;gBAC5C,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,KAAK;aACrC;SACsB,CAAC;IAChC,CAAC;IAGS,aAAa,CAAC,QAA4B;QAChD,IAAI,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,EAAE;YAClD,MAAM,eAAe,GAAoB,IAAI,4BAAe,CACxD,QAAQ,CAAC,IAAI,CAAC,MAAM,EACpB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxB,IAAI;gBACA,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,IAAI,CAAC,qBAAqB,EAAE,eAAe,CAAC,CAAC;aAC/F;YAAC,OAAO,KAAK,EAAE;gBACZ,+CAA+C;gBAC/C,kBAAkB;aACrB;SACJ;IACL,CAAC;CACJ;AA3ED,wDA2EC","file":"AvatarSynthesisAdapter.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AvatarConfig,\r\n    AvatarEventArgs,\r\n    AvatarSynthesizer,\r\n    PropertyId,\r\n    Synthesizer,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ISynthesisConnectionFactory,\r\n    ISynthesisMetadata,\r\n    ISynthesisSectionVideo,\r\n    SynthesisAdapterBase,\r\n    SynthesizerConfig\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\n\r\nexport class AvatarSynthesisAdapter extends SynthesisAdapterBase {\r\n    private readonly privAvatarSynthesizer: AvatarSynthesizer;\r\n    private readonly privAvatarConfig: AvatarConfig;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        avatarSynthesizer: AvatarSynthesizer,\r\n        avatarConfig: AvatarConfig,\r\n        ) {\r\n\r\n        super(authentication, connectionFactory,\r\n            synthesizerConfig, undefined);\r\n        this.privAvatarSynthesizer = avatarSynthesizer;\r\n        this.privSynthesizer = avatarSynthesizer as Synthesizer;\r\n        this.privAvatarConfig = avatarConfig;\r\n    }\r\n\r\n    protected setSynthesisContextSynthesisSection(): void {\r\n        this.privSynthesisContext.setSynthesisSection(undefined);\r\n    }\r\n\r\n    protected setSpeechConfigSynthesisSection(): void {\r\n        this.privSynthesizerConfig.synthesisVideoSection = {\r\n            format: {\r\n                bitrate: this.privAvatarConfig.videoFormat?.bitrate,\r\n                codec: this.privAvatarConfig.videoFormat?.codec,\r\n                crop: {\r\n                    bottomRight: {\r\n                        x: this.privAvatarConfig.videoFormat?.cropRange?.bottomRight?.x,\r\n                        y: this.privAvatarConfig.videoFormat?.cropRange?.bottomRight?.y,\r\n                    },\r\n                    topLeft: {\r\n                        x: this.privAvatarConfig.videoFormat?.cropRange?.topLeft?.x,\r\n                        y: this.privAvatarConfig.videoFormat?.cropRange?.topLeft?.y,\r\n                    },\r\n                },\r\n                resolution: {\r\n                    height: this.privAvatarConfig.videoFormat?.height,\r\n                    width: this.privAvatarConfig.videoFormat?.width,\r\n                },\r\n            },\r\n            protocol: {\r\n                name: \"WebRTC\",\r\n                webrtcConfig: {\r\n                    clientDescription: btoa(this.privSynthesizerConfig.parameters.getProperty(PropertyId.TalkingAvatarService_WebRTC_SDP)),\r\n                    iceServers: this.privAvatarSynthesizer.iceServers,\r\n                },\r\n            },\r\n            talkingAvatar: {\r\n                background: {\r\n                    color: this.privAvatarConfig.backgroundColor,\r\n                },\r\n                character: this.privAvatarConfig.character,\r\n                customized: this.privAvatarConfig.customized,\r\n                style: this.privAvatarConfig.style,\r\n            }\r\n        } as ISynthesisSectionVideo;\r\n    }\r\n\r\n\r\n    protected onAvatarEvent(metadata: ISynthesisMetadata): void {\r\n        if (!!this.privAvatarSynthesizer.avatarEventReceived) {\r\n            const avatarEventArgs: AvatarEventArgs = new AvatarEventArgs(\r\n                metadata.Data.Offset,\r\n                metadata.Data.Name);\r\n            try {\r\n                this.privAvatarSynthesizer.avatarEventReceived(this.privAvatarSynthesizer, avatarEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}