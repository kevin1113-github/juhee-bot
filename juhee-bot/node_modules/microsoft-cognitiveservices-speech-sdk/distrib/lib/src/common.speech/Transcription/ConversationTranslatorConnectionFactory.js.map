{"version":3,"sources":["src/common.speech/Transcription/ConversationTranslatorConnectionFactory.ts"],"names":[],"mappings":"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","file":"ConversationTranslatorConnectionFactory.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    RestConfigBase,\r\n    WebsocketConnection,\r\n} from \"../../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n} from \"../../common/Exports.js\";\r\nimport { StringUtils } from \"../../common/StringUtils.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../../sdk/Exports.js\";\r\nimport {\r\n    ConversationImpl\r\n} from \"../../sdk/Transcription/Conversation.js\";\r\nimport { HeaderNames } from \"../HeaderNames.js\";\r\nimport { QueryParameterNames } from \"../QueryParameterNames.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./../ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    TranscriberConnectionFactory,\r\n    TranslationConnectionFactory,\r\n    WebsocketMessageFormatter,\r\n} from \"./../Exports.js\";\r\n\r\n/**\r\n * Connection factory for the conversation translator. Handles connecting to the regular translator endpoint,\r\n * as well as the virtual microphone array transcription endpoint\r\n */\r\nexport class ConversationTranslatorConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private static readonly CTS_VIRT_MIC_PATH: string = \"/speech/recognition/dynamicaudio\";\r\n\r\n    private privConvGetter: () => ConversationImpl;\r\n\r\n    public constructor(convGetter: () => ConversationImpl) {\r\n        super();\r\n\r\n        Contracts.throwIfNullOrUndefined(convGetter, \"convGetter\");\r\n        this.privConvGetter = convGetter;\r\n    }\r\n\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n        const isVirtMicArrayEndpoint = config.parameters.getProperty(\"ConversationTranslator_MultiChannelAudio\", \"\").toUpperCase() === \"TRUE\";\r\n\r\n        const convInfo = this.privConvGetter().room;\r\n        const region = convInfo.cognitiveSpeechRegion || config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"\");\r\n\r\n        const replacementValues: IStringDictionary<string> = {\r\n            hostSuffix: ConnectionFactoryBase.getHostSuffix(region),\r\n            path: ConversationTranslatorConnectionFactory.CTS_VIRT_MIC_PATH,\r\n            region: encodeURIComponent(region)\r\n        };\r\n        replacementValues[QueryParameterNames.Language] = encodeURIComponent(config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"\"));\r\n        replacementValues[QueryParameterNames.CtsMeetingId] = encodeURIComponent(convInfo.roomId);\r\n        replacementValues[QueryParameterNames.CtsDeviceId] = encodeURIComponent(convInfo.participantId);\r\n        replacementValues[QueryParameterNames.CtsIsParticipant] = convInfo.isHost ? \"\" : (\"&\" + QueryParameterNames.CtsIsParticipant);\r\n\r\n        let endpointUrl: string = \"\";\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (isVirtMicArrayEndpoint) {\r\n            // connecting to the conversation transcription virtual microphone array endpoint\r\n            endpointUrl = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n            if (!endpointUrl) {\r\n                const hostName = config.parameters.getProperty(\r\n                    PropertyId.SpeechServiceConnection_Host,\r\n                    \"transcribe.{region}.cts.speech{hostSuffix}\");\r\n\r\n                endpointUrl = \"wss://\" + hostName + \"{path}\";\r\n            }\r\n\r\n            // because the region can change during a session, we support being passed a format string which we can then\r\n            // replace with the correct information.\r\n            endpointUrl = StringUtils.formatString(endpointUrl, replacementValues);\r\n\r\n            const parsedUrl = new URL(endpointUrl);\r\n            parsedUrl.searchParams.forEach((val: string, key: string): void => {\r\n                queryParams[key] = val;\r\n            });\r\n\r\n            const connFactory = new TranscriberConnectionFactory();\r\n            connFactory.setQueryParams(queryParams, config, endpointUrl);\r\n\r\n            // Some query parameters are required for the CTS endpoint, let's explicity set them here\r\n            queryParams[QueryParameterNames.CtsMeetingId] = replacementValues[QueryParameterNames.CtsMeetingId];\r\n            queryParams[QueryParameterNames.CtsDeviceId] = replacementValues[QueryParameterNames.CtsDeviceId];\r\n            if (!convInfo.isHost) {\r\n                queryParams[QueryParameterNames.CtsIsParticipant] = \"\"; // this doesn't have a value so set to an empty string\r\n            }\r\n\r\n            if (!(QueryParameterNames.Format in queryParams)) {\r\n                queryParams[QueryParameterNames.Format] = \"simple\";\r\n            }\r\n\r\n            parsedUrl.searchParams.forEach((val: string, key: string): void => {\r\n                parsedUrl.searchParams.set(key, queryParams[key]);\r\n                delete queryParams[key];\r\n            });\r\n\r\n            endpointUrl = parsedUrl.toString();\r\n\r\n        } else {\r\n            // connecting to regular translation endpoint\r\n            const connFactory = new TranslationConnectionFactory();\r\n\r\n            endpointUrl = connFactory.getEndpointUrl(config, true);\r\n            endpointUrl = StringUtils.formatString(endpointUrl, replacementValues);\r\n\r\n            connFactory.setQueryParams(queryParams, config, endpointUrl);\r\n        }\r\n\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        headers[RestConfigBase.configParams.token] = convInfo.token;\r\n        if (!!authInfo.token) {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n\r\n        const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"\").toUpperCase() === \"TRUE\";\r\n        return new WebsocketConnection(endpointUrl, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n"]}