{"version":3,"sources":["src/common.speech/SpeechConnectionFactory.ts"],"names":[],"mappings":"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","file":"SpeechConnectionFactory.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\n\r\nexport class SpeechConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly interactiveRelativeUri: string = \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n    private readonly conversationRelativeUri: string = \"/speech/recognition/conversation/cognitiveservices/v1\";\r\n    private readonly dictationRelativeUri: string = \"/speech/recognition/dictation/cognitiveservices/v1\";\r\n    private readonly universalUri: string = \"/speech/universal/v\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        if (!endpoint || endpoint.search(QueryParameterNames.Format) === -1) {\r\n            queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        }\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        if (!endpoint) {\r\n            switch (config.recognitionMode) {\r\n                case RecognitionMode.Conversation:\r\n                    if (config.parameters.getProperty(ForceDictationPropertyName, \"false\") === \"true\") {\r\n                        endpoint = host + this.dictationRelativeUri;\r\n                    } else {\r\n                        if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\r\n                            endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\r\n                        } else {\r\n                            endpoint = host + this.conversationRelativeUri;\r\n                        }\r\n                    }\r\n                    break;\r\n                case RecognitionMode.Dictation:\r\n                    endpoint = host + this.dictationRelativeUri;\r\n                    break;\r\n                default:\r\n                    if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\r\n                        endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\r\n                    } else {\r\n                        endpoint = host + this.interactiveRelativeUri; // default is interactive\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n\r\n        const webSocketConnection = new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n\r\n        // Set the value of SpeechServiceConnection_Url to webSocketConnection.uri (and not to `endpoint`), since this value is the final\r\n        // URI that was used to make the connection (including query parameters).\r\n        const uri: string = webSocketConnection.uri;\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, uri);\r\n\r\n        return webSocketConnection;\r\n    }\r\n}\r\n"]}