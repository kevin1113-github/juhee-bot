{"version":3,"sources":["src/sdk/Transcription/MeetingHandler.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,6BAA6B,EAAE,gBAAgB,EAAE,MAAM,eAAe,CAAC;AAChF,OAAO,EAAE,qCAAqC,EAAE,MAAM,cAAc,CAAC;AACrE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAEnD,MAAM,WAAW,cAAc;IAC3B;;OAEG;IACH,cAAc,EAAE,CAAC,MAAM,EAAE,cAAc,EAAE,KAAK,EAAE,gBAAgB,KAAK,IAAI,CAAC;IAE1E;;OAEG;IACH,cAAc,EAAE,CAAC,MAAM,EAAE,cAAc,EAAE,KAAK,EAAE,gBAAgB,KAAK,IAAI,CAAC;IAE1E;;OAEG;IACH,QAAQ,EAAE,CAAC,MAAM,EAAE,cAAc,EAAE,KAAK,EAAE,qCAAqC,KAAK,IAAI,CAAC;IAEzF;;OAEG;IACH,iBAAiB,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,GAAG,CAAC,EAAE,QAAQ,GAAG,IAAI,CAAC;IAEvD;;;OAGG;IACH,sBAAsB,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,GAAG,CAAC,EAAE,QAAQ,GAAG,IAAI,CAAC;IAE5D;;;OAGG;IACH,qBAAqB,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,GAAG,CAAC,EAAE,QAAQ,GAAG,IAAI,CAAC;CAC9D;AAED;;;GAGG;AACH,MAAM,WAAW,2BAA4B,SAAQ,cAAc;IAC9D;;OAEG;IACJ,WAAW,EAAE,CAAC,MAAM,EAAE,2BAA2B,EAAE,KAAK,EAAE,6BAA6B,KAAK,IAAI,CAAC;IAEhG;;OAEG;IACJ,YAAY,EAAE,CAAC,MAAM,EAAE,2BAA2B,EAAE,KAAK,EAAE,6BAA6B,KAAK,IAAI,CAAC;IAElG;;;OAGG;IACH,gBAAgB,CAAC,OAAO,EAAE,QAAQ,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,GAAG,CAAC,EAAE,QAAQ,GAAG,IAAI,CAAC;CAC5E","file":"MeetingHandler.d.ts","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { MeetingTranscriptionEventArgs, SessionEventArgs } from \"../Exports.js\";\r\nimport { MeetingTranscriptionCanceledEventArgs } from \"./Exports.js\";\r\nimport { Callback, IMeeting } from \"./IMeeting.js\";\r\n\r\nexport interface MeetingHandler {\r\n    /**\r\n     * Defines event handler for session started events.\r\n     */\r\n    sessionStarted: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     */\r\n    sessionStopped: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Event that signals an error with the meeting transcription, or the end of the audio stream has been reached.\r\n     */\r\n    canceled: (sender: MeetingHandler, event: MeetingTranscriptionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Leave the current meeting. After this is called, you will no longer receive any events.\r\n     */\r\n    leaveMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Starts sending audio to the transcription service for speech recognition and translation. You\r\n     * should subscribe to the Transcribing, and Transcribed events to receive results.\r\n     */\r\n    startTranscribingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Stops sending audio to the transcription service. You will still receive Transcribing, and\r\n     * and Transcribed events for other participants in the meeting.\r\n     */\r\n    stopTranscribingAsync(cb?: Callback, err?: Callback): void;\r\n}\r\n\r\n/**\r\n * A meeting transcriber that enables a connected experience where meetings can be\r\n * transcribed with each participant recognized.\r\n */\r\nexport interface MeetingTranscriptionHandler extends MeetingHandler {\r\n     /**\r\n      * The event recognized signals that a final meeting transcription result is received.\r\n      */\r\n    transcribed: (sender: MeetingTranscriptionHandler, event: MeetingTranscriptionEventArgs) => void;\r\n\r\n     /**\r\n      * The event recognizing signals that an intermediate meeting transcription result is received.\r\n      */\r\n    transcribing: (sender: MeetingTranscriptionHandler, event: MeetingTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * Joins an existing meeting.\r\n     * @param meeting The meeting to join.\r\n     */\r\n    joinMeetingAsync(meeting: IMeeting, cb?: Callback, err?: Callback): void;\r\n}\r\n"]}