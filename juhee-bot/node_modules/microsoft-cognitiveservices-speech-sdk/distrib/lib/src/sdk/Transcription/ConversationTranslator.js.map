{"version":3,"sources":["src/sdk/Transcription/ConversationTranslator.ts"],"names":[],"mappings":"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","file":"ConversationTranslator.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    IAuthentication,\r\n    ServicePropertiesPropertyName,\r\n} from \"../../common.speech/Exports.js\";\r\nimport { ConversationTranslatorConnectionFactory } from \"../../common.speech/Transcription/ConversationTranslatorConnectionFactory.js\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    IStringDictionary,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ServicePropertyChannel,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognizer\r\n} from \"../Exports.js\";\r\nimport { ConversationImpl } from \"./Conversation.js\";\r\nimport {\r\n    ConversationCommon,\r\n    ConversationExpirationEventArgs,\r\n    ConversationHandler,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    IConversationTranslator,\r\n    Participant\r\n} from \"./Exports.js\";\r\nimport { Callback, IConversation } from \"./IConversation.js\";\r\n\r\nexport enum SpeechState {\r\n    Inactive, Connecting, Connected\r\n}\r\n\r\n// child class of TranslationRecognizer meant only for use with ConversationTranslator\r\nclass ConversationTranslationRecognizer extends TranslationRecognizer {\r\n    private privTranslator: ConversationTranslator;\r\n    private privSpeechState: SpeechState;\r\n\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig: AudioConfig, translator: ConversationTranslator, convGetter: () => ConversationImpl) {\r\n\r\n        super(speechConfig, audioConfig, new ConversationTranslatorConnectionFactory(convGetter));\r\n\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        if (!!translator) {\r\n            this.privTranslator = translator;\r\n            this.sessionStarted = (): void => {\r\n                this.privSpeechState = SpeechState.Connected;\r\n            };\r\n\r\n            this.sessionStopped = (): void => {\r\n                this.privSpeechState = SpeechState.Inactive;\r\n            };\r\n\r\n            this.recognizing = (tr: TranslationRecognizer, e: TranslationRecognitionEventArgs): void => {\r\n                if (!!this.privTranslator.recognizing) {\r\n                    this.privTranslator.recognizing(this.privTranslator, e);\r\n                }\r\n            };\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n            this.recognized = async (tr: TranslationRecognizer, e: TranslationRecognitionEventArgs): Promise<void> => {\r\n                // if there is an error connecting to the conversation service from the speech service the error will be returned in the ErrorDetails field.\r\n                if (e.result?.errorDetails) {\r\n                    await this.cancelSpeech();\r\n                    // TODO: format the error message contained in 'errorDetails'\r\n                    this.fireCancelEvent(e.result.errorDetails);\r\n                } else {\r\n                    if (!!this.privTranslator.recognized) {\r\n                        this.privTranslator.recognized(this.privTranslator, e);\r\n                    }\r\n                }\r\n                return;\r\n            };\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n            this.canceled = async (): Promise<void> => {\r\n                if (this.privSpeechState !== SpeechState.Inactive) {\r\n                    try {\r\n                        await this.cancelSpeech();\r\n                    } catch (error) {\r\n                        this.privSpeechState = SpeechState.Inactive;\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    public get state(): SpeechState {\r\n        return this.privSpeechState;\r\n    }\r\n\r\n    public set state(newState: SpeechState) {\r\n        this.privSpeechState = newState;\r\n    }\r\n\r\n    public set authentication(token: IAuthentication) {\r\n        this.privReco.authentication = token;\r\n    }\r\n\r\n\r\n    public onConnection(): void {\r\n        this.privSpeechState = SpeechState.Connected;\r\n    }\r\n\r\n    public async onCancelSpeech(): Promise<void> {\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        await this.cancelSpeech();\r\n    }\r\n\r\n    /**\r\n     * Fire a cancel event\r\n     * @param error\r\n     */\r\n    private fireCancelEvent(error: string): void {\r\n        try {\r\n            if (!!this.privTranslator.canceled) {\r\n                const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\r\n                    CancellationReason.Error,\r\n                    error,\r\n                    CancellationErrorCode.RuntimeError\r\n                    );\r\n\r\n                this.privTranslator.canceled(this.privTranslator, cancelEvent);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private async cancelSpeech(): Promise<void> {\r\n        try {\r\n            this.stopContinuousRecognitionAsync();\r\n            await this.privReco?.disconnect();\r\n            this.privSpeechState = SpeechState.Inactive;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Join, leave or connect to a conversation.\r\n */\r\nexport class ConversationTranslator extends ConversationCommon implements IConversationTranslator, IDisposable {\r\n\r\n    public canceled: (sender: ConversationHandler, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: IConversationTranslator, event: ConversationExpirationEventArgs) => void;\r\n    public participantsChanged: (sender: IConversationTranslator, event: ConversationParticipantsChangedEventArgs) => void;\r\n    public sessionStarted: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public sessionStopped: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public textMessageReceived: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n    // Callbacks for whole conversation results\r\n    public transcribed: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n    public transcribing: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n    // Callbacks for detecting speech/translation results from self\r\n    public recognized: (sender: IConversationTranslator, event: TranslationRecognitionEventArgs) => void;\r\n    public recognizing: (sender: IConversationTranslator, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privProperties: PropertyCollection;\r\n    private privIsDisposed: boolean;\r\n    private privCTRecognizer: ConversationTranslationRecognizer;\r\n    private privIsSpeaking: boolean;\r\n    private privConversation: ConversationImpl;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privPlaceholderKey: string;\r\n    private privPlaceholderRegion: string;\r\n\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        super(audioConfig);\r\n        this.privIsDisposed = false;\r\n        this.privIsSpeaking = false;\r\n        this.privPlaceholderKey = \"abcdefghijklmnopqrstuvwxyz012345\";\r\n        this.privPlaceholderRegion = \"westus\";\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.privConversation?.participants;\r\n    }\r\n\r\n    private get canSpeak(): boolean {\r\n\r\n        // is there a Conversation websocket available and has the Recognizer been set up\r\n        if (!this.privConversation.isConnected || !this.privCTRecognizer) {\r\n            return false;\r\n        }\r\n\r\n        // is the user already speaking\r\n        if (this.privIsSpeaking || this.privCTRecognizer.state === SpeechState.Connected || this.privCTRecognizer.state === SpeechState.Connecting) {\r\n            return false;\r\n        }\r\n\r\n        // is the user muted\r\n        if (this.privConversation.isMutedByHost) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public onToken(token: IAuthentication): void {\r\n        this.privCTRecognizer.authentication = token;\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    /**\r\n     * Join a conversation. If this is the host, pass in the previously created Conversation object.\r\n     * @param conversation\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinConversationAsync(conversation: IConversation, nickname: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversation: string | IConversation, nickname: string, param1?: string | Callback, param2?: Callback, param3?: Callback): void {\r\n\r\n        try {\r\n\r\n            if (typeof conversation === \"string\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                if (!!this.privConversation) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedStart), param3);\r\n                }\r\n\r\n                let lang: string = param1 as string;\r\n                if (lang === undefined || lang === null || lang === \"\") {\r\n                    lang = ConversationConnectionConfig.defaultLanguageCode;\r\n                }\r\n\r\n                // create a placeholder config\r\n                this.privSpeechTranslationConfig = SpeechTranslationConfig.fromSubscription(\r\n                    this.privPlaceholderKey,\r\n                    this.privPlaceholderRegion);\r\n                this.privSpeechTranslationConfig.setProfanity(ProfanityOption.Masked);\r\n                this.privSpeechTranslationConfig.addTargetLanguage(lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], nickname);\r\n\r\n                const propertyIdsToCopy: (string | PropertyId)[] = [\r\n                    PropertyId.SpeechServiceConnection_Host,\r\n                    PropertyId.ConversationTranslator_Host,\r\n                    PropertyId.SpeechServiceConnection_Endpoint,\r\n                    PropertyId.SpeechServiceConnection_ProxyHostName,\r\n                    PropertyId.SpeechServiceConnection_ProxyPassword,\r\n                    PropertyId.SpeechServiceConnection_ProxyPort,\r\n                    PropertyId.SpeechServiceConnection_ProxyUserName,\r\n                    \"ConversationTranslator_MultiChannelAudio\",\r\n                    \"ConversationTranslator_Region\"\r\n                ];\r\n\r\n                for (const prop of propertyIdsToCopy) {\r\n                    const value = this.privProperties.getProperty(prop);\r\n                    if (value) {\r\n                        const key = typeof prop === \"string\" ? prop : PropertyId[prop];\r\n                        this.privSpeechTranslationConfig.setProperty(key, value);\r\n                    }\r\n                }\r\n\r\n                const currentProperties  = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n                for (const prop of Object.keys(currentProperties)) {\r\n                    this.privSpeechTranslationConfig.setServiceProperty(prop, currentProperties[prop], ServicePropertyChannel.UriQueryParameter);\r\n                }\r\n\r\n                // join the conversation\r\n                this.privConversation = new ConversationImpl(this.privSpeechTranslationConfig);\r\n                this.privConversation.conversationTranslator = this;\r\n\r\n                this.privConversation.joinConversationAsync(\r\n                    conversation,\r\n                    nickname,\r\n                    lang,\r\n                    ((result: string): void => {\r\n\r\n                        if (!result) {\r\n                            this.handleError(new Error(this.privErrors.permissionDeniedConnect), param3);\r\n                        }\r\n\r\n                        this.privSpeechTranslationConfig.authorizationToken = result;\r\n                        this.privConversation.room.isHost = false;\r\n\r\n                        // connect to the ws\r\n                        this.privConversation.startConversationAsync(\r\n                            ((): void => {\r\n                                this.handleCallback(param2, param3);\r\n                            }),\r\n                            ((error: any): void => {\r\n                                this.handleError(error, param3);\r\n                            }));\r\n\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, param3);\r\n                    }));\r\n\r\n            } else if (typeof conversation === \"object\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                // save the nickname\r\n                this.privProperties.setProperty(PropertyId.ConversationTranslator_Name, nickname);\r\n                // ref the conversation object\r\n                this.privConversation = conversation as ConversationImpl;\r\n                // ref the conversation translator object\r\n                this.privConversation.conversationTranslator = this;\r\n                this.privConversation.room.isHost = true;\r\n\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedConnect);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                this.privSpeechTranslationConfig = conversation.config;\r\n\r\n                this.handleCallback(param1 as Callback, param2);\r\n            } else {\r\n                this.handleError(\r\n                    new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"invalid conversation type\")),\r\n                    param2);\r\n            }\r\n\r\n        } catch (error) {\r\n            this.handleError(error, typeof param1 === \"string\" ? param3 : param2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Leave the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public leaveConversationAsync(cb?: Callback, err?: Callback): void {\r\n\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n\r\n            // stop the speech websocket\r\n            await this.cancelSpeech();\r\n            // stop the websocket\r\n            await this.privConversation.endConversationImplAsync();\r\n            // https delete request\r\n            await this.privConversation.deleteConversationImplAsync();\r\n            this.dispose();\r\n\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n\r\n        try {\r\n            Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", message));\r\n\r\n            this.privConversation.sendTextMessageAsync(message, cb, err);\r\n        } catch (error) {\r\n\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                if (this.privCTRecognizer === undefined) {\r\n                    await this.connectTranslatorRecognizer();\r\n                }\r\n                Contracts.throwIfNullOrUndefined(this.privCTRecognizer, this.privErrors.permissionDeniedSend);\r\n\r\n                if (!this.canSpeak) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n                }\r\n\r\n                await this.startContinuousRecognition();\r\n\r\n                this.privIsSpeaking = true;\r\n            } catch (error) {\r\n                this.privIsSpeaking = false;\r\n                await this.cancelSpeech();\r\n                throw error;\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stop speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                if (!this.privIsSpeaking) {\r\n                    // stop speech\r\n                    await this.cancelSpeech();\r\n                    return;\r\n                }\r\n\r\n                // stop the recognition but leave the websocket open\r\n                this.privIsSpeaking = false;\r\n                await new Promise((resolve: () => void, reject: (error: string) => void): void => {\r\n                    this.privCTRecognizer.stopContinuousRecognitionAsync(resolve, reject);\r\n                });\r\n\r\n            } catch (error) {\r\n                await this.cancelSpeech();\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(reason?: string, success?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            if (this.isDisposed && !this.privIsSpeaking) {\r\n                return;\r\n            }\r\n            await this.cancelSpeech();\r\n            this.privIsDisposed = true;\r\n            this.privSpeechTranslationConfig.close();\r\n            this.privSpeechRecognitionLanguage = undefined;\r\n            this.privProperties = undefined;\r\n            this.privAudioConfig = undefined;\r\n            this.privSpeechTranslationConfig = undefined;\r\n            this.privConversation.dispose();\r\n            this.privConversation = undefined;\r\n        })(), success, err);\r\n    }\r\n\r\n    /**\r\n     * Cancel the speech websocket\r\n     */\r\n    private async cancelSpeech(): Promise<void> {\r\n        try {\r\n            this.privIsSpeaking = false;\r\n            await this.privCTRecognizer?.onCancelSpeech();\r\n            this.privCTRecognizer = undefined;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connect to the speech translation recognizer.\r\n     * Currently there is no language validation performed before sending the SpeechLanguage code to the service.\r\n     * If it's an invalid language the raw error will be: 'Error during WebSocket handshake: Unexpected response code: 400'\r\n     * e.g. pass in 'fr' instead of 'fr-FR', or a text-only language 'cy'\r\n     */\r\n    private async connectTranslatorRecognizer(): Promise<void> {\r\n        try {\r\n\r\n            if (this.privAudioConfig === undefined) {\r\n                this.privAudioConfig = AudioConfig.fromDefaultMicrophoneInput();\r\n            }\r\n\r\n            // clear the temp subscription key if it's a participant joining\r\n            if (this.privSpeechTranslationConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key])\r\n                === this.privPlaceholderKey) {\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Key], \"\");\r\n            }\r\n\r\n            const convGetter = (): ConversationImpl => this.privConversation;\r\n            this.privCTRecognizer = new ConversationTranslationRecognizer(this.privSpeechTranslationConfig, this.privAudioConfig, this, convGetter);\r\n        } catch (error) {\r\n            await this.cancelSpeech();\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle the start speaking request\r\n     */\r\n    private startContinuousRecognition(): Promise<void> {\r\n        return new Promise((resolve: () => void, reject: (error: string) => void): void => {\r\n            this.privCTRecognizer.startContinuousRecognitionAsync(resolve, reject);\r\n        });\r\n    }\r\n}\r\n"]}